/*
 * generated by Xtext 2.16.0
 */
grammar InternalPdfMk;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.avi.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.avi.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.avi.services.PdfMkGrammarAccess;

}

@parser::members {

 	private PdfMkGrammarAccess grammarAccess;

    public InternalPdfMkParser(TokenStream input, PdfMkGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DocDefinition";
   	}

   	@Override
   	protected PdfMkGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDocDefinition
entryRuleDocDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocDefinitionRule()); }
	iv_ruleDocDefinition=ruleDocDefinition
	{ $current=$iv_ruleDocDefinition.current; }
	EOF;

// Rule DocDefinition
ruleDocDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDocDefinitionAccess().getRootsContentParserRuleCall_0());
			}
			lv_roots_0_0=ruleContent
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDocDefinitionRule());
				}
				add(
					$current,
					"roots",
					lv_roots_0_0,
					"org.xtext.avi.PdfMk.Content");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTextElement
entryRuleTextElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTextElementRule()); }
	iv_ruleTextElement=ruleTextElement
	{ $current=$iv_ruleTextElement.current.getText(); }
	EOF;

// Rule TextElement
ruleTextElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getTextElementAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleJsonElement
entryRuleJsonElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getJsonElementRule()); }
	iv_ruleJsonElement=ruleJsonElement
	{ $current=$iv_ruleJsonElement.current.getText(); }
	EOF;

// Rule JsonElement
ruleJsonElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='avi'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getJsonElementAccess().getAviKeyword());
	}
;

// Entry rule entryRuleContent
entryRuleContent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	iv_ruleContent=ruleContent
	{ $current=$iv_ruleContent.current.getText(); }
	EOF;

// Rule Content
ruleContent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='content:[]'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getContentAccess().getContentKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
