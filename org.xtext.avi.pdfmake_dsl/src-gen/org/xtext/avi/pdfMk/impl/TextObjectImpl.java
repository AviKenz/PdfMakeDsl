/**
 * generated by Xtext 2.16.0
 */
package org.xtext.avi.pdfMk.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.avi.pdfMk.PdfMkPackage;
import org.xtext.avi.pdfMk.TextObject;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Text Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isText <em>Text</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isStyle <em>Style</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isFontSize <em>Font Size</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isAlignment <em>Alignment</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isTypeFace <em>Type Face</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isItalics <em>Italics</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isWidth <em>Width</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isMargin <em>Margin</em>}</li>
 *   <li>{@link org.xtext.avi.pdfMk.impl.TextObjectImpl#isListCounter <em>List Counter</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TextObjectImpl extends ListElementsImpl implements TextObject
{
  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #isText() <em>Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isText()
   * @generated
   * @ordered
   */
  protected static final boolean TEXT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isText() <em>Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isText()
   * @generated
   * @ordered
   */
  protected boolean text = TEXT_EDEFAULT;

  /**
   * The default value of the '{@link #isStyle() <em>Style</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStyle()
   * @generated
   * @ordered
   */
  protected static final boolean STYLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStyle() <em>Style</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStyle()
   * @generated
   * @ordered
   */
  protected boolean style = STYLE_EDEFAULT;

  /**
   * The default value of the '{@link #isFontSize() <em>Font Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFontSize()
   * @generated
   * @ordered
   */
  protected static final boolean FONT_SIZE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFontSize() <em>Font Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFontSize()
   * @generated
   * @ordered
   */
  protected boolean fontSize = FONT_SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #isAlignment() <em>Alignment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAlignment()
   * @generated
   * @ordered
   */
  protected static final boolean ALIGNMENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAlignment() <em>Alignment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAlignment()
   * @generated
   * @ordered
   */
  protected boolean alignment = ALIGNMENT_EDEFAULT;

  /**
   * The default value of the '{@link #isTypeFace() <em>Type Face</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTypeFace()
   * @generated
   * @ordered
   */
  protected static final boolean TYPE_FACE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTypeFace() <em>Type Face</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTypeFace()
   * @generated
   * @ordered
   */
  protected boolean typeFace = TYPE_FACE_EDEFAULT;

  /**
   * The default value of the '{@link #isItalics() <em>Italics</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isItalics()
   * @generated
   * @ordered
   */
  protected static final boolean ITALICS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isItalics() <em>Italics</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isItalics()
   * @generated
   * @ordered
   */
  protected boolean italics = ITALICS_EDEFAULT;

  /**
   * The default value of the '{@link #isWidth() <em>Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWidth()
   * @generated
   * @ordered
   */
  protected static final boolean WIDTH_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isWidth() <em>Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWidth()
   * @generated
   * @ordered
   */
  protected boolean width = WIDTH_EDEFAULT;

  /**
   * The default value of the '{@link #isMargin() <em>Margin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMargin()
   * @generated
   * @ordered
   */
  protected static final boolean MARGIN_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMargin() <em>Margin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMargin()
   * @generated
   * @ordered
   */
  protected boolean margin = MARGIN_EDEFAULT;

  /**
   * The default value of the '{@link #isListCounter() <em>List Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isListCounter()
   * @generated
   * @ordered
   */
  protected static final boolean LIST_COUNTER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isListCounter() <em>List Counter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isListCounter()
   * @generated
   * @ordered
   */
  protected boolean listCounter = LIST_COUNTER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TextObjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PdfMkPackage.Literals.TEXT_OBJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isText()
  {
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setText(boolean newText)
  {
    boolean oldText = text;
    text = newText;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__TEXT, oldText, text));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isStyle()
  {
    return style;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStyle(boolean newStyle)
  {
    boolean oldStyle = style;
    style = newStyle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__STYLE, oldStyle, style));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFontSize()
  {
    return fontSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFontSize(boolean newFontSize)
  {
    boolean oldFontSize = fontSize;
    fontSize = newFontSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__FONT_SIZE, oldFontSize, fontSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAlignment()
  {
    return alignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlignment(boolean newAlignment)
  {
    boolean oldAlignment = alignment;
    alignment = newAlignment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__ALIGNMENT, oldAlignment, alignment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isTypeFace()
  {
    return typeFace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeFace(boolean newTypeFace)
  {
    boolean oldTypeFace = typeFace;
    typeFace = newTypeFace;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__TYPE_FACE, oldTypeFace, typeFace));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isItalics()
  {
    return italics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setItalics(boolean newItalics)
  {
    boolean oldItalics = italics;
    italics = newItalics;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__ITALICS, oldItalics, italics));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isWidth()
  {
    return width;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWidth(boolean newWidth)
  {
    boolean oldWidth = width;
    width = newWidth;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__WIDTH, oldWidth, width));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isMargin()
  {
    return margin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMargin(boolean newMargin)
  {
    boolean oldMargin = margin;
    margin = newMargin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__MARGIN, oldMargin, margin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isListCounter()
  {
    return listCounter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setListCounter(boolean newListCounter)
  {
    boolean oldListCounter = listCounter;
    listCounter = newListCounter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PdfMkPackage.TEXT_OBJECT__LIST_COUNTER, oldListCounter, listCounter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PdfMkPackage.TEXT_OBJECT__VALUE:
        return getValue();
      case PdfMkPackage.TEXT_OBJECT__TEXT:
        return isText();
      case PdfMkPackage.TEXT_OBJECT__STYLE:
        return isStyle();
      case PdfMkPackage.TEXT_OBJECT__FONT_SIZE:
        return isFontSize();
      case PdfMkPackage.TEXT_OBJECT__ALIGNMENT:
        return isAlignment();
      case PdfMkPackage.TEXT_OBJECT__TYPE_FACE:
        return isTypeFace();
      case PdfMkPackage.TEXT_OBJECT__ITALICS:
        return isItalics();
      case PdfMkPackage.TEXT_OBJECT__WIDTH:
        return isWidth();
      case PdfMkPackage.TEXT_OBJECT__MARGIN:
        return isMargin();
      case PdfMkPackage.TEXT_OBJECT__LIST_COUNTER:
        return isListCounter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PdfMkPackage.TEXT_OBJECT__VALUE:
        setValue((String)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__TEXT:
        setText((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__STYLE:
        setStyle((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__FONT_SIZE:
        setFontSize((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__ALIGNMENT:
        setAlignment((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__TYPE_FACE:
        setTypeFace((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__ITALICS:
        setItalics((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__WIDTH:
        setWidth((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__MARGIN:
        setMargin((Boolean)newValue);
        return;
      case PdfMkPackage.TEXT_OBJECT__LIST_COUNTER:
        setListCounter((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PdfMkPackage.TEXT_OBJECT__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__TEXT:
        setText(TEXT_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__STYLE:
        setStyle(STYLE_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__FONT_SIZE:
        setFontSize(FONT_SIZE_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__ALIGNMENT:
        setAlignment(ALIGNMENT_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__TYPE_FACE:
        setTypeFace(TYPE_FACE_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__ITALICS:
        setItalics(ITALICS_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__WIDTH:
        setWidth(WIDTH_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__MARGIN:
        setMargin(MARGIN_EDEFAULT);
        return;
      case PdfMkPackage.TEXT_OBJECT__LIST_COUNTER:
        setListCounter(LIST_COUNTER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PdfMkPackage.TEXT_OBJECT__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
      case PdfMkPackage.TEXT_OBJECT__TEXT:
        return text != TEXT_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__STYLE:
        return style != STYLE_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__FONT_SIZE:
        return fontSize != FONT_SIZE_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__ALIGNMENT:
        return alignment != ALIGNMENT_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__TYPE_FACE:
        return typeFace != TYPE_FACE_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__ITALICS:
        return italics != ITALICS_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__WIDTH:
        return width != WIDTH_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__MARGIN:
        return margin != MARGIN_EDEFAULT;
      case PdfMkPackage.TEXT_OBJECT__LIST_COUNTER:
        return listCounter != LIST_COUNTER_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (value: ");
    result.append(value);
    result.append(", text: ");
    result.append(text);
    result.append(", style: ");
    result.append(style);
    result.append(", fontSize: ");
    result.append(fontSize);
    result.append(", alignment: ");
    result.append(alignment);
    result.append(", typeFace: ");
    result.append(typeFace);
    result.append(", italics: ");
    result.append(italics);
    result.append(", width: ");
    result.append(width);
    result.append(", margin: ");
    result.append(margin);
    result.append(", listCounter: ");
    result.append(listCounter);
    result.append(')');
    return result.toString();
  }

} //TextObjectImpl
