/**
 * generated by Xtext 2.16.0
 */
package org.xtext.avi.pdfMk.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.avi.pdfMk.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.avi.pdfMk.PdfMkPackage
 * @generated
 */
public class PdfMkAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PdfMkPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PdfMkAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PdfMkPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PdfMkSwitch<Adapter> modelSwitch =
    new PdfMkSwitch<Adapter>()
    {
      @Override
      public Adapter caseDocDefinition(DocDefinition object)
      {
        return createDocDefinitionAdapter();
      }
      @Override
      public Adapter caseStringObject(StringObject object)
      {
        return createStringObjectAdapter();
      }
      @Override
      public Adapter caseTypeFaceDefinition(TypeFaceDefinition object)
      {
        return createTypeFaceDefinitionAdapter();
      }
      @Override
      public Adapter caseTextStyleDefinition(TextStyleDefinition object)
      {
        return createTextStyleDefinitionAdapter();
      }
      @Override
      public Adapter caseItalicsDefinition(ItalicsDefinition object)
      {
        return createItalicsDefinitionAdapter();
      }
      @Override
      public Adapter caseFontSizeDefinition(FontSizeDefinition object)
      {
        return createFontSizeDefinitionAdapter();
      }
      @Override
      public Adapter caseStyleDefinition(StyleDefinition object)
      {
        return createStyleDefinitionAdapter();
      }
      @Override
      public Adapter caseTextObject(TextObject object)
      {
        return createTextObjectAdapter();
      }
      @Override
      public Adapter caseStyleObject(StyleObject object)
      {
        return createStyleObjectAdapter();
      }
      @Override
      public Adapter caseStyleObjects(StyleObjects object)
      {
        return createStyleObjectsAdapter();
      }
      @Override
      public Adapter caseContentObject(ContentObject object)
      {
        return createContentObjectAdapter();
      }
      @Override
      public Adapter caseContentObjects(ContentObjects object)
      {
        return createContentObjectsAdapter();
      }
      @Override
      public Adapter caseStyles(Styles object)
      {
        return createStylesAdapter();
      }
      @Override
      public Adapter caseContent(Content object)
      {
        return createContentAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.DocDefinition <em>Doc Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.DocDefinition
   * @generated
   */
  public Adapter createDocDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.StringObject <em>String Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.StringObject
   * @generated
   */
  public Adapter createStringObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.TypeFaceDefinition <em>Type Face Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.TypeFaceDefinition
   * @generated
   */
  public Adapter createTypeFaceDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.TextStyleDefinition <em>Text Style Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.TextStyleDefinition
   * @generated
   */
  public Adapter createTextStyleDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.ItalicsDefinition <em>Italics Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.ItalicsDefinition
   * @generated
   */
  public Adapter createItalicsDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.FontSizeDefinition <em>Font Size Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.FontSizeDefinition
   * @generated
   */
  public Adapter createFontSizeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.StyleDefinition <em>Style Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.StyleDefinition
   * @generated
   */
  public Adapter createStyleDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.TextObject <em>Text Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.TextObject
   * @generated
   */
  public Adapter createTextObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.StyleObject <em>Style Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.StyleObject
   * @generated
   */
  public Adapter createStyleObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.StyleObjects <em>Style Objects</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.StyleObjects
   * @generated
   */
  public Adapter createStyleObjectsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.ContentObject <em>Content Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.ContentObject
   * @generated
   */
  public Adapter createContentObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.ContentObjects <em>Content Objects</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.ContentObjects
   * @generated
   */
  public Adapter createContentObjectsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.Styles <em>Styles</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.Styles
   * @generated
   */
  public Adapter createStylesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.avi.pdfMk.Content <em>Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.avi.pdfMk.Content
   * @generated
   */
  public Adapter createContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PdfMkAdapterFactory
