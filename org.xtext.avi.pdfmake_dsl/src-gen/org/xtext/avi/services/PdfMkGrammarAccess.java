/*
 * generated by Xtext 2.16.0
 */
package org.xtext.avi.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PdfMkGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.DocDefinition");
		private final Assignment cRootsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootsContentParserRuleCall_0 = (RuleCall)cRootsAssignment.eContents().get(0);
		
		//DocDefinition:
		//	roots+=Content;
		@Override public ParserRule getRule() { return rule; }
		
		//roots+=Content
		public Assignment getRootsAssignment() { return cRootsAssignment; }
		
		//Content
		public RuleCall getRootsContentParserRuleCall_0() { return cRootsContentParserRuleCall_0; }
	}
	public class TextElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextElement");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TextElement:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class JsonElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.JsonElement");
		private final Keyword cAviKeyword = (Keyword)rule.eContents().get(1);
		
		//JsonElement:
		//	"avi";
		@Override public ParserRule getRule() { return rule; }
		
		//"avi"
		public Keyword getAviKeyword() { return cAviKeyword; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.Element");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cElementAlternatives_0 = (Alternatives)cElementAssignment.eContents().get(0);
		private final RuleCall cElementTextElementParserRuleCall_0_0 = (RuleCall)cElementAlternatives_0.eContents().get(0);
		private final RuleCall cElementJsonElementParserRuleCall_0_1 = (RuleCall)cElementAlternatives_0.eContents().get(1);
		
		//Element:
		//	element=(TextElement | JsonElement);
		@Override public ParserRule getRule() { return rule; }
		
		//element=(TextElement | JsonElement)
		public Assignment getElementAssignment() { return cElementAssignment; }
		
		//(TextElement | JsonElement)
		public Alternatives getElementAlternatives_0() { return cElementAlternatives_0; }
		
		//TextElement
		public RuleCall getElementTextElementParserRuleCall_0_0() { return cElementTextElementParserRuleCall_0_0; }
		
		//JsonElement
		public RuleCall getElementJsonElementParserRuleCall_0_1() { return cElementJsonElementParserRuleCall_0_1; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.Content");
		private final Keyword cContentKeyword = (Keyword)rule.eContents().get(1);
		
		//Content:
		//	"content:[]";
		@Override public ParserRule getRule() { return rule; }
		
		//"content:[]"
		public Keyword getContentKeyword() { return cContentKeyword; }
	}
	
	
	private final DocDefinitionElements pDocDefinition;
	private final TextElementElements pTextElement;
	private final JsonElementElements pJsonElement;
	private final ElementElements pElement;
	private final ContentElements pContent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PdfMkGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocDefinition = new DocDefinitionElements();
		this.pTextElement = new TextElementElements();
		this.pJsonElement = new JsonElementElements();
		this.pElement = new ElementElements();
		this.pContent = new ContentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.avi.PdfMk".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DocDefinition:
	//	roots+=Content;
	public DocDefinitionElements getDocDefinitionAccess() {
		return pDocDefinition;
	}
	
	public ParserRule getDocDefinitionRule() {
		return getDocDefinitionAccess().getRule();
	}
	
	//TextElement:
	//	STRING;
	public TextElementElements getTextElementAccess() {
		return pTextElement;
	}
	
	public ParserRule getTextElementRule() {
		return getTextElementAccess().getRule();
	}
	
	//JsonElement:
	//	"avi";
	public JsonElementElements getJsonElementAccess() {
		return pJsonElement;
	}
	
	public ParserRule getJsonElementRule() {
		return getJsonElementAccess().getRule();
	}
	
	//Element:
	//	element=(TextElement | JsonElement);
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Content:
	//	"content:[]";
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
