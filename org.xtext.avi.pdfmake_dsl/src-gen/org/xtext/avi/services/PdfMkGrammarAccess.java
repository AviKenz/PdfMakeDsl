/*
 * generated by Xtext 2.16.0
 */
package org.xtext.avi.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PdfMkGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.DocDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentContentParserRuleCall_4_0 = (RuleCall)cContentAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStylesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStylesStylesParserRuleCall_5_1_0 = (RuleCall)cStylesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO [?] import: see INT in Terminals.xtext
		//// TODO [L] autovervollstaendigung beim style
		//// TODO [L] stack for style see playground-margin
		//// TODO [M] fix semi-column problem see like by ContentObjects
		///******************** ********************/ /************ Root Model ****************/ DocDefinition:
		//	"var" "dd" "=" "{" content=Content ("," styles=Styles)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"var" "dd" "=" "{" content=Content ("," styles=Styles)? "}"
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//"dd"
		public Keyword getDdKeyword_1() { return cDdKeyword_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//content=Content
		public Assignment getContentAssignment_4() { return cContentAssignment_4; }
		
		//Content
		public RuleCall getContentContentParserRuleCall_4_0() { return cContentContentParserRuleCall_4_0; }
		
		//("," styles=Styles)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//styles=Styles
		public Assignment getStylesAssignment_5_1() { return cStylesAssignment_5_1; }
		
		//Styles
		public RuleCall getStylesStylesParserRuleCall_5_1_0() { return cStylesStylesParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StringObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StringObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		///******************** Types definition ********************/ StringObject:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TextAlignmentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextAlignmentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCenterKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TextAlignmentType:
		//	"center" | "left" | "right";
		@Override public ParserRule getRule() { return rule; }
		
		//"center" | "left" | "right"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"center"
		public Keyword getCenterKeyword_0() { return cCenterKeyword_0; }
		
		//"left"
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }
		
		//"right"
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
	}
	public class TypeFaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TypeFaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyBoldKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBooleanTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TypeFaceDefinition:
		//	key="bold" ":" value=BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//key="bold" ":" value=BooleanType
		public Group getGroup() { return cGroup; }
		
		//key="bold"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"bold"
		public Keyword getKeyBoldKeyword_0_0() { return cKeyBoldKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=BooleanType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BooleanType
		public RuleCall getValueBooleanTypeParserRuleCall_2_0() { return cValueBooleanTypeParserRuleCall_2_0; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.BooleanType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanType:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }
		
		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ColumnTextWidthTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnTextWidthType");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO [?] add "auto" and "*"
		//ColumnTextWidthType:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class TextStyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextStyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyStyleKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// TODO [L] checken ob sich der style name im root element 'styles' befindet	
		//TextStyleDefinition:
		//	key="style" ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key="style" ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key="style"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"style"
		public Keyword getKeyStyleKeyword_0_0() { return cKeyStyleKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TextDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TextDefinition:
		//	"text:" STRING | "[" STRING "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"text:" STRING | "[" STRING "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"text:" STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//"text:"
		public Keyword getTextKeyword_0_0() { return cTextKeyword_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }
		
		//"[" STRING "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class TextAlignmentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextAlignmentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlignmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// TODO [L] add validattion rule (Enums String are not supported)
		//TextAlignmentDefinition:
		//	"alignment" ":" STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"alignment" ":" STRING
		public Group getGroup() { return cGroup; }
		
		//"alignment"
		public Keyword getAlignmentKeyword_0() { return cAlignmentKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	public class ItalicsDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ItalicsDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyItalicsKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBooleanTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ItalicsDefinition:
		//	key="italics" ":" value=BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//key="italics" ":" value=BooleanType
		public Group getGroup() { return cGroup; }
		
		//key="italics"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"italics"
		public Keyword getKeyItalicsKeyword_0_0() { return cKeyItalicsKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=BooleanType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BooleanType
		public RuleCall getValueBooleanTypeParserRuleCall_2_0() { return cValueBooleanTypeParserRuleCall_2_0; }
	}
	public class FontSizeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.FontSizeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyFontSizeKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FontSizeDefinition:
		//	key="fontSize" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="fontSize" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="fontSize"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"fontSize"
		public Keyword getKeyFontSizeKeyword_0_0() { return cKeyFontSizeKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class StyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStyleObjectParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StyleDefinition:
		//	key=STRING ":" value=StyleObject;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING ":" value=StyleObject
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=StyleObject
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StyleObject
		public RuleCall getValueStyleObjectParserRuleCall_2_0() { return cValueStyleObjectParserRuleCall_2_0; }
	}
	public class WidthDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.WidthDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyWidthKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueColumnTextWidthTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//WidthDefinition:
		//	key="width" ":" value=ColumnTextWidthType;
		@Override public ParserRule getRule() { return rule; }
		
		//key="width" ":" value=ColumnTextWidthType
		public Group getGroup() { return cGroup; }
		
		//key="width"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"width"
		public Keyword getKeyWidthKeyword_0_0() { return cKeyWidthKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ColumnTextWidthType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ColumnTextWidthType
		public RuleCall getValueColumnTextWidthTypeParserRuleCall_2_0() { return cValueColumnTextWidthTypeParserRuleCall_2_0; }
	}
	public class ColumnGapDefintionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnGapDefintion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyColumnGapKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ColumnGapDefintion:
		//	key="columnGap" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="columnGap" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="columnGap"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"columnGap"
		public Keyword getKeyColumnGapKeyword_0_0() { return cKeyColumnGapKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ColumnDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGlobalStyleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGlobalStyleTextStyleDefinitionParserRuleCall_1_0_0 = (RuleCall)cGlobalStyleAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cKeyColumnsKeyword_2_0 = (Keyword)cKeyAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cValueColumnObjectParserRuleCall_4_0_0 = (RuleCall)cValueAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cValueAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cValueColumnObjectParserRuleCall_4_1_1_0 = (RuleCall)cValueAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ColumnDefinition:
		//	"{" (globalStyle?=TextStyleDefinition ",")?
		//	key="columns" ":" (value+=ColumnObject? ("," value+=ColumnObject)*)
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (globalStyle?=TextStyleDefinition ",")? key="columns" ":" (value+=ColumnObject? ("," value+=ColumnObject)*) "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(globalStyle?=TextStyleDefinition ",")?
		public Group getGroup_1() { return cGroup_1; }
		
		//globalStyle?=TextStyleDefinition
		public Assignment getGlobalStyleAssignment_1_0() { return cGlobalStyleAssignment_1_0; }
		
		//TextStyleDefinition
		public RuleCall getGlobalStyleTextStyleDefinitionParserRuleCall_1_0_0() { return cGlobalStyleTextStyleDefinitionParserRuleCall_1_0_0; }
		
		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//key="columns"
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//"columns"
		public Keyword getKeyColumnsKeyword_2_0() { return cKeyColumnsKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//value+=ColumnObject? ("," value+=ColumnObject)*
		public Group getGroup_4() { return cGroup_4; }
		
		//value+=ColumnObject?
		public Assignment getValueAssignment_4_0() { return cValueAssignment_4_0; }
		
		//ColumnObject
		public RuleCall getValueColumnObjectParserRuleCall_4_0_0() { return cValueColumnObjectParserRuleCall_4_0_0; }
		
		//("," value+=ColumnObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//value+=ColumnObject
		public Assignment getValueAssignment_4_1_1() { return cValueAssignment_4_1_1; }
		
		//ColumnObject
		public RuleCall getValueColumnObjectParserRuleCall_4_1_1_0() { return cValueColumnObjectParserRuleCall_4_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MarginDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.MarginDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyMarginKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesINTTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesINTTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO [?] limit values element to 4
		//MarginDefinition:
		//	key="margin" ":" "[" values+=INT? ("," values+=INT)* "]";
		@Override public ParserRule getRule() { return rule; }
		
		//key="margin" ":" "[" values+=INT? ("," values+=INT)* "]"
		public Group getGroup() { return cGroup; }
		
		//key="margin"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"margin"
		public Keyword getKeyMarginKeyword_0_0() { return cKeyMarginKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//values+=INT?
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_3_0() { return cValuesINTTerminalRuleCall_3_0; }
		
		//("," values+=INT)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=INT
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_1_0() { return cValuesINTTerminalRuleCall_4_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class ImageDefintionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ImageDefintion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyImageKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ImageDefintion:
		//	key="image" ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key="image" ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key="image"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"image"
		public Keyword getKeyImageKeyword_0_0() { return cKeyImageKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ImageWidthDefintionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ImageWidthDefintion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyWidthKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ImageWidthDefintion:
		//	key="width" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="width" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="width"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"width"
		public Keyword getKeyWidthKeyword_0_0() { return cKeyWidthKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ImageHeightDefintionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ImageHeightDefintion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyHeightKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ImageHeightDefintion:
		//	key="height" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="height" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="height"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"height"
		public Keyword getKeyHeightKeyword_0_0() { return cKeyHeightKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ImagePageBreakDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ImagePageBreakDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyPageBreakKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// TODO [L] check with validator if value is either before or after	
		//ImagePageBreakDefinition:
		//	key="pageBreak" ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key="pageBreak" ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key="pageBreak"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"pageBreak"
		public Keyword getKeyPageBreakKeyword_0_0() { return cKeyPageBreakKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ImageFitDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ImageFitDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyFitKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cValueLeftSquareBracketKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesINTTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesINTTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ImageFitDefinition:
		//	key="fit" ":" value="[" values+=INT ("," values+=INT) "]";
		@Override public ParserRule getRule() { return rule; }
		
		//key="fit" ":" value="[" values+=INT ("," values+=INT) "]"
		public Group getGroup() { return cGroup; }
		
		//key="fit"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"fit"
		public Keyword getKeyFitKeyword_0_0() { return cKeyFitKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value="["
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//"["
		public Keyword getValueLeftSquareBracketKeyword_2_0() { return cValueLeftSquareBracketKeyword_2_0; }
		
		//values+=INT
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_3_0() { return cValuesINTTerminalRuleCall_3_0; }
		
		//"," values+=INT
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=INT
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_1_0() { return cValuesINTTerminalRuleCall_4_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class ImageOpacityDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ImageOpacityDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyOpacityKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ImageOpacityDefinition:
		//	key="opacity" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="opacity" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="opacity"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"opacity"
		public Keyword getKeyOpacityKeyword_0_0() { return cKeyOpacityKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ListReversedDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListReversedDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyReversedKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBooleanTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ListReversedDefinition:
		//	key="reversed" ":" value=BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//key="reversed" ":" value=BooleanType
		public Group getGroup() { return cGroup; }
		
		//key="reversed"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"reversed"
		public Keyword getKeyReversedKeyword_0_0() { return cKeyReversedKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=BooleanType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BooleanType
		public RuleCall getValueBooleanTypeParserRuleCall_2_0() { return cValueBooleanTypeParserRuleCall_2_0; }
	}
	public class ListStartDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListStartDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyStartKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ListStartDefinition:
		//	key="start" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="start" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="start"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"start"
		public Keyword getKeyStartKeyword_0_0() { return cKeyStartKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ListCounterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListCounterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyCounterKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ListCounterDefinition:
		//	key="counter" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="counter" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="counter"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"counter"
		public Keyword getKeyCounterKeyword_0_0() { return cKeyCounterKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ListTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyTypeKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ListTypeDefinition:
		//	key="type" ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key="type" ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key="type"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"type"
		public Keyword getKeyTypeKeyword_0_0() { return cKeyTypeKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ListColorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListColorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyColorKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ListColorDefinition:
		//	key="color" ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key="color" ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key="color"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"color"
		public Keyword getKeyColorKeyword_0_0() { return cKeyColorKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ListMarkerColorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListMarkerColorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyMarkerColorKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ListMarkerColorDefinition:
		//	key="markerColor" ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key="markerColor" ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key="markerColor"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"markerColor"
		public Keyword getKeyMarkerColorKeyword_0_0() { return cKeyMarkerColorKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TextObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftCurlyBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextTextDefinitionParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStyleTextStyleDefinitionParserRuleCall_2_1_0 = (RuleCall)cStyleAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFontSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFontSizeFontSizeDefinitionParserRuleCall_3_1_0 = (RuleCall)cFontSizeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAlignmentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAlignmentTextAlignmentDefinitionParserRuleCall_4_1_0 = (RuleCall)cAlignmentAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeFaceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeFaceTypeFaceDefinitionParserRuleCall_5_1_0 = (RuleCall)cTypeFaceAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cItalicsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cItalicsItalicsDefinitionParserRuleCall_6_1_0 = (RuleCall)cItalicsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cWidthAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cWidthWidthDefinitionParserRuleCall_7_1_0 = (RuleCall)cWidthAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cMarginAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cMarginMarginDefinitionParserRuleCall_8_1_0 = (RuleCall)cMarginAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cListCounterAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cListCounterListCounterDefinitionParserRuleCall_9_1_0 = (RuleCall)cListCounterAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///******************** Objects definition ********************/ // TODO [M] write grammar to support text in []. see playground-style3
		//TextObject:
		//	value="{" text?=TextDefinition ("," style?=TextStyleDefinition)? ("," fontSize?=FontSizeDefinition)? (","
		//	alignment?=TextAlignmentDefinition)? ("," typeFace?=TypeFaceDefinition)? ("," italics?=ItalicsDefinition)? (","
		//	width?=WidthDefinition)? ("," margin?=MarginDefinition)? ("," listCounter?=ListCounterDefinition)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//value="{" text?=TextDefinition ("," style?=TextStyleDefinition)? ("," fontSize?=FontSizeDefinition)? (","
		//alignment?=TextAlignmentDefinition)? ("," typeFace?=TypeFaceDefinition)? ("," italics?=ItalicsDefinition)? (","
		//width?=WidthDefinition)? ("," margin?=MarginDefinition)? ("," listCounter?=ListCounterDefinition)? "}"
		public Group getGroup() { return cGroup; }
		
		//value="{"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"{"
		public Keyword getValueLeftCurlyBracketKeyword_0_0() { return cValueLeftCurlyBracketKeyword_0_0; }
		
		//text?=TextDefinition
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//TextDefinition
		public RuleCall getTextTextDefinitionParserRuleCall_1_0() { return cTextTextDefinitionParserRuleCall_1_0; }
		
		//("," style?=TextStyleDefinition)?
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//style?=TextStyleDefinition
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }
		
		//TextStyleDefinition
		public RuleCall getStyleTextStyleDefinitionParserRuleCall_2_1_0() { return cStyleTextStyleDefinitionParserRuleCall_2_1_0; }
		
		//("," fontSize?=FontSizeDefinition)?
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//fontSize?=FontSizeDefinition
		public Assignment getFontSizeAssignment_3_1() { return cFontSizeAssignment_3_1; }
		
		//FontSizeDefinition
		public RuleCall getFontSizeFontSizeDefinitionParserRuleCall_3_1_0() { return cFontSizeFontSizeDefinitionParserRuleCall_3_1_0; }
		
		//("," alignment?=TextAlignmentDefinition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//alignment?=TextAlignmentDefinition
		public Assignment getAlignmentAssignment_4_1() { return cAlignmentAssignment_4_1; }
		
		//TextAlignmentDefinition
		public RuleCall getAlignmentTextAlignmentDefinitionParserRuleCall_4_1_0() { return cAlignmentTextAlignmentDefinitionParserRuleCall_4_1_0; }
		
		//("," typeFace?=TypeFaceDefinition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//typeFace?=TypeFaceDefinition
		public Assignment getTypeFaceAssignment_5_1() { return cTypeFaceAssignment_5_1; }
		
		//TypeFaceDefinition
		public RuleCall getTypeFaceTypeFaceDefinitionParserRuleCall_5_1_0() { return cTypeFaceTypeFaceDefinitionParserRuleCall_5_1_0; }
		
		//("," italics?=ItalicsDefinition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//italics?=ItalicsDefinition
		public Assignment getItalicsAssignment_6_1() { return cItalicsAssignment_6_1; }
		
		//ItalicsDefinition
		public RuleCall getItalicsItalicsDefinitionParserRuleCall_6_1_0() { return cItalicsItalicsDefinitionParserRuleCall_6_1_0; }
		
		//("," width?=WidthDefinition)?
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//width?=WidthDefinition
		public Assignment getWidthAssignment_7_1() { return cWidthAssignment_7_1; }
		
		//WidthDefinition
		public RuleCall getWidthWidthDefinitionParserRuleCall_7_1_0() { return cWidthWidthDefinitionParserRuleCall_7_1_0; }
		
		//("," margin?=MarginDefinition)?
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//margin?=MarginDefinition
		public Assignment getMarginAssignment_8_1() { return cMarginAssignment_8_1; }
		
		//MarginDefinition
		public RuleCall getMarginMarginDefinitionParserRuleCall_8_1_0() { return cMarginMarginDefinitionParserRuleCall_8_1_0; }
		
		//("," listCounter?=ListCounterDefinition)?
		public Group getGroup_9() { return cGroup_9; }
		
		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//listCounter?=ListCounterDefinition
		public Assignment getListCounterAssignment_9_1() { return cListCounterAssignment_9_1; }
		
		//ListCounterDefinition
		public RuleCall getListCounterListCounterDefinitionParserRuleCall_9_1_0() { return cListCounterListCounterDefinitionParserRuleCall_9_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ColumnTextObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnTextObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueColumnDefinitionParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ColumnTextObject:
		//	value=ColumnDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ColumnDefinition
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ColumnDefinition
		public RuleCall getValueColumnDefinitionParserRuleCall_0() { return cValueColumnDefinitionParserRuleCall_0; }
	}
	public class StyleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StyleObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cValueLeftCurlyBracketKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cFontSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFontSizeFontSizeDefinitionParserRuleCall_3_0 = (RuleCall)cFontSizeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeFaceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeFaceTypeFaceDefinitionParserRuleCall_4_1_0 = (RuleCall)cTypeFaceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAlignmentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAlignmentTextAlignmentDefinitionParserRuleCall_5_1_0 = (RuleCall)cAlignmentAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cItalicsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cItalicsItalicsDefinitionParserRuleCall_6_1_0 = (RuleCall)cItalicsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMarginAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMarginMarginDefinitionParserRuleCall_7_1_0 = (RuleCall)cMarginAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//StyleObject:
		//	key=ID ":"
		//	value="{"
		//	fontSize?=FontSizeDefinition? ("," typeFace?=TypeFaceDefinition)? ("," alignment?=TextAlignmentDefinition)? (","
		//	italics?=ItalicsDefinition)? ("," margin?=MarginDefinition)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID ":" value="{" fontSize?=FontSizeDefinition? ("," typeFace?=TypeFaceDefinition)? (","
		//alignment?=TextAlignmentDefinition)? ("," italics?=ItalicsDefinition)? ("," margin?=MarginDefinition)? "}"
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value="{"
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//"{"
		public Keyword getValueLeftCurlyBracketKeyword_2_0() { return cValueLeftCurlyBracketKeyword_2_0; }
		
		//fontSize?=FontSizeDefinition?
		public Assignment getFontSizeAssignment_3() { return cFontSizeAssignment_3; }
		
		//FontSizeDefinition
		public RuleCall getFontSizeFontSizeDefinitionParserRuleCall_3_0() { return cFontSizeFontSizeDefinitionParserRuleCall_3_0; }
		
		//("," typeFace?=TypeFaceDefinition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//typeFace?=TypeFaceDefinition
		public Assignment getTypeFaceAssignment_4_1() { return cTypeFaceAssignment_4_1; }
		
		//TypeFaceDefinition
		public RuleCall getTypeFaceTypeFaceDefinitionParserRuleCall_4_1_0() { return cTypeFaceTypeFaceDefinitionParserRuleCall_4_1_0; }
		
		//("," alignment?=TextAlignmentDefinition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//alignment?=TextAlignmentDefinition
		public Assignment getAlignmentAssignment_5_1() { return cAlignmentAssignment_5_1; }
		
		//TextAlignmentDefinition
		public RuleCall getAlignmentTextAlignmentDefinitionParserRuleCall_5_1_0() { return cAlignmentTextAlignmentDefinitionParserRuleCall_5_1_0; }
		
		//("," italics?=ItalicsDefinition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//italics?=ItalicsDefinition
		public Assignment getItalicsAssignment_6_1() { return cItalicsAssignment_6_1; }
		
		//ItalicsDefinition
		public RuleCall getItalicsItalicsDefinitionParserRuleCall_6_1_0() { return cItalicsItalicsDefinitionParserRuleCall_6_1_0; }
		
		//("," margin?=MarginDefinition)?
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//margin?=MarginDefinition
		public Assignment getMarginAssignment_7_1() { return cMarginAssignment_7_1; }
		
		//MarginDefinition
		public RuleCall getMarginMarginDefinitionParserRuleCall_7_1_0() { return cMarginMarginDefinitionParserRuleCall_7_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class StyleObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StyleObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueStyleObjectParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueStyleObjectParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StyleObjects:
		//	"{" (value+=StyleObject ("," value+=StyleObject)*)
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (value+=StyleObject ("," value+=StyleObject)*) "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//value+=StyleObject ("," value+=StyleObject)*
		public Group getGroup_1() { return cGroup_1; }
		
		//value+=StyleObject
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//StyleObject
		public RuleCall getValueStyleObjectParserRuleCall_1_0_0() { return cValueStyleObjectParserRuleCall_1_0_0; }
		
		//("," value+=StyleObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//value+=StyleObject
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//StyleObject
		public RuleCall getValueStyleObjectParserRuleCall_1_1_1_0() { return cValueStyleObjectParserRuleCall_1_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class InnerColumnObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.InnerColumnObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftSquareBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTextStringObjectParserRuleCall_1_0_0 = (RuleCall)cTextAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTextStringObjectParserRuleCall_1_1_1_0 = (RuleCall)cTextAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTextObjectAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_0_0 = (RuleCall)cTextObjectAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTextObjectAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_1_1_0 = (RuleCall)cTextObjectAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_0_0 = (RuleCall)cColumnAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_1_1_0 = (RuleCall)cColumnAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InnerColumnObject:
		//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*)
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) "]"
		public Group getGroup() { return cGroup; }
		
		//value="["
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"["
		public Keyword getValueLeftSquareBracketKeyword_0_0() { return cValueLeftSquareBracketKeyword_0_0; }
		
		//text+=StringObject? ("," text+=StringObject)*
		public Group getGroup_1() { return cGroup_1; }
		
		//text+=StringObject?
		public Assignment getTextAssignment_1_0() { return cTextAssignment_1_0; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_0_0() { return cTextStringObjectParserRuleCall_1_0_0; }
		
		//("," text+=StringObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//text+=StringObject
		public Assignment getTextAssignment_1_1_1() { return cTextAssignment_1_1_1; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_1_1_0() { return cTextStringObjectParserRuleCall_1_1_1_0; }
		
		//textObject+=TextObject? ("," textObject+=TextObject)*
		public Group getGroup_2() { return cGroup_2; }
		
		//textObject+=TextObject?
		public Assignment getTextObjectAssignment_2_0() { return cTextObjectAssignment_2_0; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_0_0() { return cTextObjectTextObjectParserRuleCall_2_0_0; }
		
		//("," textObject+=TextObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//textObject+=TextObject
		public Assignment getTextObjectAssignment_2_1_1() { return cTextObjectAssignment_2_1_1; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_1_1_0() { return cTextObjectTextObjectParserRuleCall_2_1_1_0; }
		
		//column+=ColumnDefinition? ("," column+=ColumnDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//column+=ColumnDefinition?
		public Assignment getColumnAssignment_3_0() { return cColumnAssignment_3_0; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_0_0() { return cColumnColumnDefinitionParserRuleCall_3_0_0; }
		
		//("," column+=ColumnDefinition)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//column+=ColumnDefinition
		public Assignment getColumnAssignment_3_1_1() { return cColumnAssignment_3_1_1; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_1_1_0() { return cColumnColumnDefinitionParserRuleCall_3_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ColumnObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftSquareBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTextStringObjectParserRuleCall_1_0_0 = (RuleCall)cTextAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTextStringObjectParserRuleCall_1_1_1_0 = (RuleCall)cTextAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTextObjectAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_0_0 = (RuleCall)cTextObjectAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTextObjectAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_1_1_0 = (RuleCall)cTextObjectAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_0_0 = (RuleCall)cColumnAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_1_1_0 = (RuleCall)cColumnAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInnerColumnAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInnerColumnInnerColumnObjectParserRuleCall_4_0_0 = (RuleCall)cInnerColumnAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInnerColumnAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInnerColumnInnerColumnObjectParserRuleCall_4_1_1_0 = (RuleCall)cInnerColumnAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ColumnObject:
		//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) (innerColumn+=InnerColumnObject? (","
		//	innerColumn+=InnerColumnObject)*)
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) (innerColumn+=InnerColumnObject? (","
		//innerColumn+=InnerColumnObject)*) "]"
		public Group getGroup() { return cGroup; }
		
		//value="["
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"["
		public Keyword getValueLeftSquareBracketKeyword_0_0() { return cValueLeftSquareBracketKeyword_0_0; }
		
		//text+=StringObject? ("," text+=StringObject)*
		public Group getGroup_1() { return cGroup_1; }
		
		//text+=StringObject?
		public Assignment getTextAssignment_1_0() { return cTextAssignment_1_0; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_0_0() { return cTextStringObjectParserRuleCall_1_0_0; }
		
		//("," text+=StringObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//text+=StringObject
		public Assignment getTextAssignment_1_1_1() { return cTextAssignment_1_1_1; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_1_1_0() { return cTextStringObjectParserRuleCall_1_1_1_0; }
		
		//textObject+=TextObject? ("," textObject+=TextObject)*
		public Group getGroup_2() { return cGroup_2; }
		
		//textObject+=TextObject?
		public Assignment getTextObjectAssignment_2_0() { return cTextObjectAssignment_2_0; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_0_0() { return cTextObjectTextObjectParserRuleCall_2_0_0; }
		
		//("," textObject+=TextObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//textObject+=TextObject
		public Assignment getTextObjectAssignment_2_1_1() { return cTextObjectAssignment_2_1_1; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_1_1_0() { return cTextObjectTextObjectParserRuleCall_2_1_1_0; }
		
		//column+=ColumnDefinition? ("," column+=ColumnDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//column+=ColumnDefinition?
		public Assignment getColumnAssignment_3_0() { return cColumnAssignment_3_0; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_0_0() { return cColumnColumnDefinitionParserRuleCall_3_0_0; }
		
		//("," column+=ColumnDefinition)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//column+=ColumnDefinition
		public Assignment getColumnAssignment_3_1_1() { return cColumnAssignment_3_1_1; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_1_1_0() { return cColumnColumnDefinitionParserRuleCall_3_1_1_0; }
		
		//innerColumn+=InnerColumnObject? ("," innerColumn+=InnerColumnObject)*
		public Group getGroup_4() { return cGroup_4; }
		
		//innerColumn+=InnerColumnObject?
		public Assignment getInnerColumnAssignment_4_0() { return cInnerColumnAssignment_4_0; }
		
		//InnerColumnObject
		public RuleCall getInnerColumnInnerColumnObjectParserRuleCall_4_0_0() { return cInnerColumnInnerColumnObjectParserRuleCall_4_0_0; }
		
		//("," innerColumn+=InnerColumnObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//innerColumn+=InnerColumnObject
		public Assignment getInnerColumnAssignment_4_1_1() { return cInnerColumnAssignment_4_1_1; }
		
		//InnerColumnObject
		public RuleCall getInnerColumnInnerColumnObjectParserRuleCall_4_1_1_0() { return cInnerColumnInnerColumnObjectParserRuleCall_4_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class ImageObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ImageObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftCurlyBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cImageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImageImageDefintionParserRuleCall_1_0 = (RuleCall)cImageAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWidthAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWidthImageWidthDefintionParserRuleCall_2_1_0 = (RuleCall)cWidthAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cHeightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHeightImageHeightDefintionParserRuleCall_3_1_0 = (RuleCall)cHeightAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOpacityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOpacityImageOpacityDefinitionParserRuleCall_4_1_0 = (RuleCall)cOpacityAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFitImageFitDefinitionParserRuleCall_5_1_0 = (RuleCall)cFitAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPageBreakAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPageBreakImagePageBreakDefinitionParserRuleCall_6_1_0 = (RuleCall)cPageBreakAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ImageObject:
		//	value="{"
		//	image?=ImageDefintion? ("," width?=ImageWidthDefintion)? ("," height?=ImageHeightDefintion)? (","
		//	opacity?=ImageOpacityDefinition)? ("," fit?=ImageFitDefinition)? ("," pageBreak?=ImagePageBreakDefinition)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//value="{" image?=ImageDefintion? ("," width?=ImageWidthDefintion)? ("," height?=ImageHeightDefintion)? (","
		//opacity?=ImageOpacityDefinition)? ("," fit?=ImageFitDefinition)? ("," pageBreak?=ImagePageBreakDefinition)? "}"
		public Group getGroup() { return cGroup; }
		
		//value="{"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"{"
		public Keyword getValueLeftCurlyBracketKeyword_0_0() { return cValueLeftCurlyBracketKeyword_0_0; }
		
		//image?=ImageDefintion?
		public Assignment getImageAssignment_1() { return cImageAssignment_1; }
		
		//ImageDefintion
		public RuleCall getImageImageDefintionParserRuleCall_1_0() { return cImageImageDefintionParserRuleCall_1_0; }
		
		//("," width?=ImageWidthDefintion)?
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//width?=ImageWidthDefintion
		public Assignment getWidthAssignment_2_1() { return cWidthAssignment_2_1; }
		
		//ImageWidthDefintion
		public RuleCall getWidthImageWidthDefintionParserRuleCall_2_1_0() { return cWidthImageWidthDefintionParserRuleCall_2_1_0; }
		
		//("," height?=ImageHeightDefintion)?
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//height?=ImageHeightDefintion
		public Assignment getHeightAssignment_3_1() { return cHeightAssignment_3_1; }
		
		//ImageHeightDefintion
		public RuleCall getHeightImageHeightDefintionParserRuleCall_3_1_0() { return cHeightImageHeightDefintionParserRuleCall_3_1_0; }
		
		//("," opacity?=ImageOpacityDefinition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//opacity?=ImageOpacityDefinition
		public Assignment getOpacityAssignment_4_1() { return cOpacityAssignment_4_1; }
		
		//ImageOpacityDefinition
		public RuleCall getOpacityImageOpacityDefinitionParserRuleCall_4_1_0() { return cOpacityImageOpacityDefinitionParserRuleCall_4_1_0; }
		
		//("," fit?=ImageFitDefinition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//fit?=ImageFitDefinition
		public Assignment getFitAssignment_5_1() { return cFitAssignment_5_1; }
		
		//ImageFitDefinition
		public RuleCall getFitImageFitDefinitionParserRuleCall_5_1_0() { return cFitImageFitDefinitionParserRuleCall_5_1_0; }
		
		//("," pageBreak?=ImagePageBreakDefinition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//pageBreak?=ImagePageBreakDefinition
		public Assignment getPageBreakAssignment_6_1() { return cPageBreakAssignment_6_1; }
		
		//ImagePageBreakDefinition
		public RuleCall getPageBreakImagePageBreakDefinitionParserRuleCall_6_1_0() { return cPageBreakImagePageBreakDefinitionParserRuleCall_6_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ListObjectPropertiesWrapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListObjectPropertiesWrapper");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueListReversedDefinitionParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueListCounterDefinitionParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueListTypeDefinitionParserRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueListColorDefinitionParserRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		private final RuleCall cValueListMarkerColorDefinitionParserRuleCall_0_4 = (RuleCall)cValueAlternatives_0.eContents().get(4);
		
		//ListObjectPropertiesWrapper:
		//	value=(ListReversedDefinition | ListCounterDefinition | ListTypeDefinition | ListColorDefinition |
		//	ListMarkerColorDefinition);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(ListReversedDefinition | ListCounterDefinition | ListTypeDefinition | ListColorDefinition |
		//ListMarkerColorDefinition)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(ListReversedDefinition | ListCounterDefinition | ListTypeDefinition | ListColorDefinition | ListMarkerColorDefinition)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//ListReversedDefinition
		public RuleCall getValueListReversedDefinitionParserRuleCall_0_0() { return cValueListReversedDefinitionParserRuleCall_0_0; }
		
		//ListCounterDefinition
		public RuleCall getValueListCounterDefinitionParserRuleCall_0_1() { return cValueListCounterDefinitionParserRuleCall_0_1; }
		
		//ListTypeDefinition
		public RuleCall getValueListTypeDefinitionParserRuleCall_0_2() { return cValueListTypeDefinitionParserRuleCall_0_2; }
		
		//ListColorDefinition
		public RuleCall getValueListColorDefinitionParserRuleCall_0_3() { return cValueListColorDefinitionParserRuleCall_0_3; }
		
		//ListMarkerColorDefinition
		public RuleCall getValueListMarkerColorDefinitionParserRuleCall_0_4() { return cValueListMarkerColorDefinitionParserRuleCall_0_4; }
	}
	public class ListElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElValuesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElValuesSTRINGTerminalRuleCall_0_0 = (RuleCall)cElValuesAssignment_0.eContents().get(0);
		private final RuleCall cTextObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColumnDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ListElements:
		//	elValues=STRING | TextObject | ColumnDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//elValues=STRING | TextObject | ColumnDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elValues=STRING
		public Assignment getElValuesAssignment_0() { return cElValuesAssignment_0; }
		
		//STRING
		public RuleCall getElValuesSTRINGTerminalRuleCall_0_0() { return cElValuesSTRINGTerminalRuleCall_0_0; }
		
		//TextObject
		public RuleCall getTextObjectParserRuleCall_1() { return cTextObjectParserRuleCall_1; }
		
		//ColumnDefinition
		public RuleCall getColumnDefinitionParserRuleCall_2() { return cColumnDefinitionParserRuleCall_2; }
	}
	public class ListObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ListObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftCurlyBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPropertiesListObjectPropertiesWrapperParserRuleCall_1_0_0 = (RuleCall)cPropertiesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPropertiesListObjectPropertiesWrapperParserRuleCall_1_1_1_0 = (RuleCall)cPropertiesAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cUlKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cOlKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElementsListElementsParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cElemtensAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cElemtensListElementsParserRuleCall_5_1_1_0 = (RuleCall)cElemtensAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ListObject:
		//	value="{" (properties+=ListObjectPropertiesWrapper ("," properties+=ListObjectPropertiesWrapper ",")?)* ("ul" | "ol")
		//	":" "[" (elements+=ListElements? ("," elemtens+=ListElements)*)
		//	"]"
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//value="{" (properties+=ListObjectPropertiesWrapper ("," properties+=ListObjectPropertiesWrapper ",")?)* ("ul" | "ol")
		//":" "[" (elements+=ListElements? ("," elemtens+=ListElements)*) "]" "}"
		public Group getGroup() { return cGroup; }
		
		//value="{"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"{"
		public Keyword getValueLeftCurlyBracketKeyword_0_0() { return cValueLeftCurlyBracketKeyword_0_0; }
		
		//(properties+=ListObjectPropertiesWrapper ("," properties+=ListObjectPropertiesWrapper ",")?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//properties+=ListObjectPropertiesWrapper
		public Assignment getPropertiesAssignment_1_0() { return cPropertiesAssignment_1_0; }
		
		//ListObjectPropertiesWrapper
		public RuleCall getPropertiesListObjectPropertiesWrapperParserRuleCall_1_0_0() { return cPropertiesListObjectPropertiesWrapperParserRuleCall_1_0_0; }
		
		//("," properties+=ListObjectPropertiesWrapper ",")?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//properties+=ListObjectPropertiesWrapper
		public Assignment getPropertiesAssignment_1_1_1() { return cPropertiesAssignment_1_1_1; }
		
		//ListObjectPropertiesWrapper
		public RuleCall getPropertiesListObjectPropertiesWrapperParserRuleCall_1_1_1_0() { return cPropertiesListObjectPropertiesWrapperParserRuleCall_1_1_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_1_2() { return cCommaKeyword_1_1_2; }
		
		//"ul" | "ol"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"ul"
		public Keyword getUlKeyword_2_0() { return cUlKeyword_2_0; }
		
		//"ol"
		public Keyword getOlKeyword_2_1() { return cOlKeyword_2_1; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//elements+=ListElements? ("," elemtens+=ListElements)*
		public Group getGroup_5() { return cGroup_5; }
		
		//elements+=ListElements?
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }
		
		//ListElements
		public RuleCall getElementsListElementsParserRuleCall_5_0_0() { return cElementsListElementsParserRuleCall_5_0_0; }
		
		//("," elemtens+=ListElements)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//elemtens+=ListElements
		public Assignment getElemtensAssignment_5_1_1() { return cElemtensAssignment_5_1_1; }
		
		//ListElements
		public RuleCall getElemtensListElementsParserRuleCall_5_1_1_0() { return cElemtensListElementsParserRuleCall_5_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ContentObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ContentObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueStringObjectParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueTextObjectParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueColumnTextObjectParserRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueImageObjectParserRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		private final RuleCall cValueListObjectParserRuleCall_0_4 = (RuleCall)cValueAlternatives_0.eContents().get(4);
		
		//ContentObject:
		//	value=(StringObject | TextObject | ColumnTextObject | ImageObject | ListObject);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(StringObject | TextObject | ColumnTextObject | ImageObject | ListObject)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(StringObject | TextObject | ColumnTextObject | ImageObject | ListObject)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//StringObject
		public RuleCall getValueStringObjectParserRuleCall_0_0() { return cValueStringObjectParserRuleCall_0_0; }
		
		//TextObject
		public RuleCall getValueTextObjectParserRuleCall_0_1() { return cValueTextObjectParserRuleCall_0_1; }
		
		//ColumnTextObject
		public RuleCall getValueColumnTextObjectParserRuleCall_0_2() { return cValueColumnTextObjectParserRuleCall_0_2; }
		
		//ImageObject
		public RuleCall getValueImageObjectParserRuleCall_0_3() { return cValueImageObjectParserRuleCall_0_3; }
		
		//ListObject
		public RuleCall getValueListObjectParserRuleCall_0_4() { return cValueListObjectParserRuleCall_0_4; }
	}
	public class ContentObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ContentObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueContentObjectParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueContentObjectParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContentObjects:
		//	"[" (value+=ContentObject ("," value+=ContentObject)*)?
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" (value+=ContentObject ("," value+=ContentObject)*)? "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(value+=ContentObject ("," value+=ContentObject)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//value+=ContentObject
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//ContentObject
		public RuleCall getValueContentObjectParserRuleCall_1_0_0() { return cValueContentObjectParserRuleCall_1_0_0; }
		
		//("," value+=ContentObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//value+=ContentObject
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//ContentObject
		public RuleCall getValueContentObjectParserRuleCall_1_1_1_0() { return cValueContentObjectParserRuleCall_1_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class StylesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.Styles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyStylesKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStyleObjectsParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///******************** Root Objects definition ********************/ Styles:
		//	key="styles" ":" value=StyleObjects;
		@Override public ParserRule getRule() { return rule; }
		
		//key="styles" ":" value=StyleObjects
		public Group getGroup() { return cGroup; }
		
		//key="styles"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"styles"
		public Keyword getKeyStylesKeyword_0_0() { return cKeyStylesKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=StyleObjects
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StyleObjects
		public RuleCall getValueStyleObjectsParserRuleCall_2_0() { return cValueStyleObjectsParserRuleCall_2_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyContentKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueContentObjectsParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Content:
		//	key="content" ":" value=ContentObjects;
		@Override public ParserRule getRule() { return rule; }
		
		//key="content" ":" value=ContentObjects
		public Group getGroup() { return cGroup; }
		
		//key="content"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"content"
		public Keyword getKeyContentKeyword_0_0() { return cKeyContentKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ContentObjects
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ContentObjects
		public RuleCall getValueContentObjectsParserRuleCall_2_0() { return cValueContentObjectsParserRuleCall_2_0; }
	}
	
	
	private final DocDefinitionElements pDocDefinition;
	private final StringObjectElements pStringObject;
	private final TextAlignmentTypeElements pTextAlignmentType;
	private final TypeFaceDefinitionElements pTypeFaceDefinition;
	private final BooleanTypeElements pBooleanType;
	private final ColumnTextWidthTypeElements pColumnTextWidthType;
	private final TextStyleDefinitionElements pTextStyleDefinition;
	private final TextDefinitionElements pTextDefinition;
	private final TextAlignmentDefinitionElements pTextAlignmentDefinition;
	private final ItalicsDefinitionElements pItalicsDefinition;
	private final FontSizeDefinitionElements pFontSizeDefinition;
	private final StyleDefinitionElements pStyleDefinition;
	private final WidthDefinitionElements pWidthDefinition;
	private final ColumnGapDefintionElements pColumnGapDefintion;
	private final ColumnDefinitionElements pColumnDefinition;
	private final MarginDefinitionElements pMarginDefinition;
	private final ImageDefintionElements pImageDefintion;
	private final ImageWidthDefintionElements pImageWidthDefintion;
	private final ImageHeightDefintionElements pImageHeightDefintion;
	private final ImagePageBreakDefinitionElements pImagePageBreakDefinition;
	private final ImageFitDefinitionElements pImageFitDefinition;
	private final ImageOpacityDefinitionElements pImageOpacityDefinition;
	private final ListReversedDefinitionElements pListReversedDefinition;
	private final ListStartDefinitionElements pListStartDefinition;
	private final ListCounterDefinitionElements pListCounterDefinition;
	private final ListTypeDefinitionElements pListTypeDefinition;
	private final ListColorDefinitionElements pListColorDefinition;
	private final ListMarkerColorDefinitionElements pListMarkerColorDefinition;
	private final TextObjectElements pTextObject;
	private final ColumnTextObjectElements pColumnTextObject;
	private final StyleObjectElements pStyleObject;
	private final StyleObjectsElements pStyleObjects;
	private final InnerColumnObjectElements pInnerColumnObject;
	private final ColumnObjectElements pColumnObject;
	private final ImageObjectElements pImageObject;
	private final ListObjectPropertiesWrapperElements pListObjectPropertiesWrapper;
	private final ListElementsElements pListElements;
	private final ListObjectElements pListObject;
	private final ContentObjectElements pContentObject;
	private final ContentObjectsElements pContentObjects;
	private final StylesElements pStyles;
	private final ContentElements pContent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PdfMkGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocDefinition = new DocDefinitionElements();
		this.pStringObject = new StringObjectElements();
		this.pTextAlignmentType = new TextAlignmentTypeElements();
		this.pTypeFaceDefinition = new TypeFaceDefinitionElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pColumnTextWidthType = new ColumnTextWidthTypeElements();
		this.pTextStyleDefinition = new TextStyleDefinitionElements();
		this.pTextDefinition = new TextDefinitionElements();
		this.pTextAlignmentDefinition = new TextAlignmentDefinitionElements();
		this.pItalicsDefinition = new ItalicsDefinitionElements();
		this.pFontSizeDefinition = new FontSizeDefinitionElements();
		this.pStyleDefinition = new StyleDefinitionElements();
		this.pWidthDefinition = new WidthDefinitionElements();
		this.pColumnGapDefintion = new ColumnGapDefintionElements();
		this.pColumnDefinition = new ColumnDefinitionElements();
		this.pMarginDefinition = new MarginDefinitionElements();
		this.pImageDefintion = new ImageDefintionElements();
		this.pImageWidthDefintion = new ImageWidthDefintionElements();
		this.pImageHeightDefintion = new ImageHeightDefintionElements();
		this.pImagePageBreakDefinition = new ImagePageBreakDefinitionElements();
		this.pImageFitDefinition = new ImageFitDefinitionElements();
		this.pImageOpacityDefinition = new ImageOpacityDefinitionElements();
		this.pListReversedDefinition = new ListReversedDefinitionElements();
		this.pListStartDefinition = new ListStartDefinitionElements();
		this.pListCounterDefinition = new ListCounterDefinitionElements();
		this.pListTypeDefinition = new ListTypeDefinitionElements();
		this.pListColorDefinition = new ListColorDefinitionElements();
		this.pListMarkerColorDefinition = new ListMarkerColorDefinitionElements();
		this.pTextObject = new TextObjectElements();
		this.pColumnTextObject = new ColumnTextObjectElements();
		this.pStyleObject = new StyleObjectElements();
		this.pStyleObjects = new StyleObjectsElements();
		this.pInnerColumnObject = new InnerColumnObjectElements();
		this.pColumnObject = new ColumnObjectElements();
		this.pImageObject = new ImageObjectElements();
		this.pListObjectPropertiesWrapper = new ListObjectPropertiesWrapperElements();
		this.pListElements = new ListElementsElements();
		this.pListObject = new ListObjectElements();
		this.pContentObject = new ContentObjectElements();
		this.pContentObjects = new ContentObjectsElements();
		this.pStyles = new StylesElements();
		this.pContent = new ContentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.avi.PdfMk".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// TODO [?] import: see INT in Terminals.xtext
	//// TODO [L] autovervollstaendigung beim style
	//// TODO [L] stack for style see playground-margin
	//// TODO [M] fix semi-column problem see like by ContentObjects
	///******************** ********************/ /************ Root Model ****************/ DocDefinition:
	//	"var" "dd" "=" "{" content=Content ("," styles=Styles)? "}";
	public DocDefinitionElements getDocDefinitionAccess() {
		return pDocDefinition;
	}
	
	public ParserRule getDocDefinitionRule() {
		return getDocDefinitionAccess().getRule();
	}
	
	///******************** Types definition ********************/ StringObject:
	//	value=STRING;
	public StringObjectElements getStringObjectAccess() {
		return pStringObject;
	}
	
	public ParserRule getStringObjectRule() {
		return getStringObjectAccess().getRule();
	}
	
	//TextAlignmentType:
	//	"center" | "left" | "right";
	public TextAlignmentTypeElements getTextAlignmentTypeAccess() {
		return pTextAlignmentType;
	}
	
	public ParserRule getTextAlignmentTypeRule() {
		return getTextAlignmentTypeAccess().getRule();
	}
	
	//TypeFaceDefinition:
	//	key="bold" ":" value=BooleanType;
	public TypeFaceDefinitionElements getTypeFaceDefinitionAccess() {
		return pTypeFaceDefinition;
	}
	
	public ParserRule getTypeFaceDefinitionRule() {
		return getTypeFaceDefinitionAccess().getRule();
	}
	
	//BooleanType:
	//	"true" | "false";
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//// TODO [?] add "auto" and "*"
	//ColumnTextWidthType:
	//	INT;
	public ColumnTextWidthTypeElements getColumnTextWidthTypeAccess() {
		return pColumnTextWidthType;
	}
	
	public ParserRule getColumnTextWidthTypeRule() {
		return getColumnTextWidthTypeAccess().getRule();
	}
	
	//// TODO [L] checken ob sich der style name im root element 'styles' befindet	
	//TextStyleDefinition:
	//	key="style" ":" value=STRING;
	public TextStyleDefinitionElements getTextStyleDefinitionAccess() {
		return pTextStyleDefinition;
	}
	
	public ParserRule getTextStyleDefinitionRule() {
		return getTextStyleDefinitionAccess().getRule();
	}
	
	//TextDefinition:
	//	"text:" STRING | "[" STRING "]";
	public TextDefinitionElements getTextDefinitionAccess() {
		return pTextDefinition;
	}
	
	public ParserRule getTextDefinitionRule() {
		return getTextDefinitionAccess().getRule();
	}
	
	//// TODO [L] add validattion rule (Enums String are not supported)
	//TextAlignmentDefinition:
	//	"alignment" ":" STRING;
	public TextAlignmentDefinitionElements getTextAlignmentDefinitionAccess() {
		return pTextAlignmentDefinition;
	}
	
	public ParserRule getTextAlignmentDefinitionRule() {
		return getTextAlignmentDefinitionAccess().getRule();
	}
	
	//ItalicsDefinition:
	//	key="italics" ":" value=BooleanType;
	public ItalicsDefinitionElements getItalicsDefinitionAccess() {
		return pItalicsDefinition;
	}
	
	public ParserRule getItalicsDefinitionRule() {
		return getItalicsDefinitionAccess().getRule();
	}
	
	//FontSizeDefinition:
	//	key="fontSize" ":" value=INT;
	public FontSizeDefinitionElements getFontSizeDefinitionAccess() {
		return pFontSizeDefinition;
	}
	
	public ParserRule getFontSizeDefinitionRule() {
		return getFontSizeDefinitionAccess().getRule();
	}
	
	//StyleDefinition:
	//	key=STRING ":" value=StyleObject;
	public StyleDefinitionElements getStyleDefinitionAccess() {
		return pStyleDefinition;
	}
	
	public ParserRule getStyleDefinitionRule() {
		return getStyleDefinitionAccess().getRule();
	}
	
	//WidthDefinition:
	//	key="width" ":" value=ColumnTextWidthType;
	public WidthDefinitionElements getWidthDefinitionAccess() {
		return pWidthDefinition;
	}
	
	public ParserRule getWidthDefinitionRule() {
		return getWidthDefinitionAccess().getRule();
	}
	
	//ColumnGapDefintion:
	//	key="columnGap" ":" value=INT;
	public ColumnGapDefintionElements getColumnGapDefintionAccess() {
		return pColumnGapDefintion;
	}
	
	public ParserRule getColumnGapDefintionRule() {
		return getColumnGapDefintionAccess().getRule();
	}
	
	//ColumnDefinition:
	//	"{" (globalStyle?=TextStyleDefinition ",")?
	//	key="columns" ":" (value+=ColumnObject? ("," value+=ColumnObject)*)
	//	"}";
	public ColumnDefinitionElements getColumnDefinitionAccess() {
		return pColumnDefinition;
	}
	
	public ParserRule getColumnDefinitionRule() {
		return getColumnDefinitionAccess().getRule();
	}
	
	//// TODO [?] limit values element to 4
	//MarginDefinition:
	//	key="margin" ":" "[" values+=INT? ("," values+=INT)* "]";
	public MarginDefinitionElements getMarginDefinitionAccess() {
		return pMarginDefinition;
	}
	
	public ParserRule getMarginDefinitionRule() {
		return getMarginDefinitionAccess().getRule();
	}
	
	//ImageDefintion:
	//	key="image" ":" value=STRING;
	public ImageDefintionElements getImageDefintionAccess() {
		return pImageDefintion;
	}
	
	public ParserRule getImageDefintionRule() {
		return getImageDefintionAccess().getRule();
	}
	
	//ImageWidthDefintion:
	//	key="width" ":" value=INT;
	public ImageWidthDefintionElements getImageWidthDefintionAccess() {
		return pImageWidthDefintion;
	}
	
	public ParserRule getImageWidthDefintionRule() {
		return getImageWidthDefintionAccess().getRule();
	}
	
	//ImageHeightDefintion:
	//	key="height" ":" value=INT;
	public ImageHeightDefintionElements getImageHeightDefintionAccess() {
		return pImageHeightDefintion;
	}
	
	public ParserRule getImageHeightDefintionRule() {
		return getImageHeightDefintionAccess().getRule();
	}
	
	//// TODO [L] check with validator if value is either before or after	
	//ImagePageBreakDefinition:
	//	key="pageBreak" ":" value=STRING;
	public ImagePageBreakDefinitionElements getImagePageBreakDefinitionAccess() {
		return pImagePageBreakDefinition;
	}
	
	public ParserRule getImagePageBreakDefinitionRule() {
		return getImagePageBreakDefinitionAccess().getRule();
	}
	
	//ImageFitDefinition:
	//	key="fit" ":" value="[" values+=INT ("," values+=INT) "]";
	public ImageFitDefinitionElements getImageFitDefinitionAccess() {
		return pImageFitDefinition;
	}
	
	public ParserRule getImageFitDefinitionRule() {
		return getImageFitDefinitionAccess().getRule();
	}
	
	//ImageOpacityDefinition:
	//	key="opacity" ":" value=INT;
	public ImageOpacityDefinitionElements getImageOpacityDefinitionAccess() {
		return pImageOpacityDefinition;
	}
	
	public ParserRule getImageOpacityDefinitionRule() {
		return getImageOpacityDefinitionAccess().getRule();
	}
	
	//ListReversedDefinition:
	//	key="reversed" ":" value=BooleanType;
	public ListReversedDefinitionElements getListReversedDefinitionAccess() {
		return pListReversedDefinition;
	}
	
	public ParserRule getListReversedDefinitionRule() {
		return getListReversedDefinitionAccess().getRule();
	}
	
	//ListStartDefinition:
	//	key="start" ":" value=INT;
	public ListStartDefinitionElements getListStartDefinitionAccess() {
		return pListStartDefinition;
	}
	
	public ParserRule getListStartDefinitionRule() {
		return getListStartDefinitionAccess().getRule();
	}
	
	//ListCounterDefinition:
	//	key="counter" ":" value=INT;
	public ListCounterDefinitionElements getListCounterDefinitionAccess() {
		return pListCounterDefinition;
	}
	
	public ParserRule getListCounterDefinitionRule() {
		return getListCounterDefinitionAccess().getRule();
	}
	
	//ListTypeDefinition:
	//	key="type" ":" value=STRING;
	public ListTypeDefinitionElements getListTypeDefinitionAccess() {
		return pListTypeDefinition;
	}
	
	public ParserRule getListTypeDefinitionRule() {
		return getListTypeDefinitionAccess().getRule();
	}
	
	//ListColorDefinition:
	//	key="color" ":" value=STRING;
	public ListColorDefinitionElements getListColorDefinitionAccess() {
		return pListColorDefinition;
	}
	
	public ParserRule getListColorDefinitionRule() {
		return getListColorDefinitionAccess().getRule();
	}
	
	//ListMarkerColorDefinition:
	//	key="markerColor" ":" value=STRING;
	public ListMarkerColorDefinitionElements getListMarkerColorDefinitionAccess() {
		return pListMarkerColorDefinition;
	}
	
	public ParserRule getListMarkerColorDefinitionRule() {
		return getListMarkerColorDefinitionAccess().getRule();
	}
	
	///******************** Objects definition ********************/ // TODO [M] write grammar to support text in []. see playground-style3
	//TextObject:
	//	value="{" text?=TextDefinition ("," style?=TextStyleDefinition)? ("," fontSize?=FontSizeDefinition)? (","
	//	alignment?=TextAlignmentDefinition)? ("," typeFace?=TypeFaceDefinition)? ("," italics?=ItalicsDefinition)? (","
	//	width?=WidthDefinition)? ("," margin?=MarginDefinition)? ("," listCounter?=ListCounterDefinition)?
	//	"}";
	public TextObjectElements getTextObjectAccess() {
		return pTextObject;
	}
	
	public ParserRule getTextObjectRule() {
		return getTextObjectAccess().getRule();
	}
	
	//ColumnTextObject:
	//	value=ColumnDefinition;
	public ColumnTextObjectElements getColumnTextObjectAccess() {
		return pColumnTextObject;
	}
	
	public ParserRule getColumnTextObjectRule() {
		return getColumnTextObjectAccess().getRule();
	}
	
	//StyleObject:
	//	key=ID ":"
	//	value="{"
	//	fontSize?=FontSizeDefinition? ("," typeFace?=TypeFaceDefinition)? ("," alignment?=TextAlignmentDefinition)? (","
	//	italics?=ItalicsDefinition)? ("," margin?=MarginDefinition)?
	//	"}";
	public StyleObjectElements getStyleObjectAccess() {
		return pStyleObject;
	}
	
	public ParserRule getStyleObjectRule() {
		return getStyleObjectAccess().getRule();
	}
	
	//StyleObjects:
	//	"{" (value+=StyleObject ("," value+=StyleObject)*)
	//	"}";
	public StyleObjectsElements getStyleObjectsAccess() {
		return pStyleObjects;
	}
	
	public ParserRule getStyleObjectsRule() {
		return getStyleObjectsAccess().getRule();
	}
	
	//InnerColumnObject:
	//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
	//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*)
	//	"]";
	public InnerColumnObjectElements getInnerColumnObjectAccess() {
		return pInnerColumnObject;
	}
	
	public ParserRule getInnerColumnObjectRule() {
		return getInnerColumnObjectAccess().getRule();
	}
	
	//ColumnObject:
	//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
	//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) (innerColumn+=InnerColumnObject? (","
	//	innerColumn+=InnerColumnObject)*)
	//	"]";
	public ColumnObjectElements getColumnObjectAccess() {
		return pColumnObject;
	}
	
	public ParserRule getColumnObjectRule() {
		return getColumnObjectAccess().getRule();
	}
	
	//ImageObject:
	//	value="{"
	//	image?=ImageDefintion? ("," width?=ImageWidthDefintion)? ("," height?=ImageHeightDefintion)? (","
	//	opacity?=ImageOpacityDefinition)? ("," fit?=ImageFitDefinition)? ("," pageBreak?=ImagePageBreakDefinition)?
	//	"}";
	public ImageObjectElements getImageObjectAccess() {
		return pImageObject;
	}
	
	public ParserRule getImageObjectRule() {
		return getImageObjectAccess().getRule();
	}
	
	//ListObjectPropertiesWrapper:
	//	value=(ListReversedDefinition | ListCounterDefinition | ListTypeDefinition | ListColorDefinition |
	//	ListMarkerColorDefinition);
	public ListObjectPropertiesWrapperElements getListObjectPropertiesWrapperAccess() {
		return pListObjectPropertiesWrapper;
	}
	
	public ParserRule getListObjectPropertiesWrapperRule() {
		return getListObjectPropertiesWrapperAccess().getRule();
	}
	
	//ListElements:
	//	elValues=STRING | TextObject | ColumnDefinition;
	public ListElementsElements getListElementsAccess() {
		return pListElements;
	}
	
	public ParserRule getListElementsRule() {
		return getListElementsAccess().getRule();
	}
	
	//ListObject:
	//	value="{" (properties+=ListObjectPropertiesWrapper ("," properties+=ListObjectPropertiesWrapper ",")?)* ("ul" | "ol")
	//	":" "[" (elements+=ListElements? ("," elemtens+=ListElements)*)
	//	"]"
	//	"}";
	public ListObjectElements getListObjectAccess() {
		return pListObject;
	}
	
	public ParserRule getListObjectRule() {
		return getListObjectAccess().getRule();
	}
	
	//ContentObject:
	//	value=(StringObject | TextObject | ColumnTextObject | ImageObject | ListObject);
	public ContentObjectElements getContentObjectAccess() {
		return pContentObject;
	}
	
	public ParserRule getContentObjectRule() {
		return getContentObjectAccess().getRule();
	}
	
	//ContentObjects:
	//	"[" (value+=ContentObject ("," value+=ContentObject)*)?
	//	"]";
	public ContentObjectsElements getContentObjectsAccess() {
		return pContentObjects;
	}
	
	public ParserRule getContentObjectsRule() {
		return getContentObjectsAccess().getRule();
	}
	
	///******************** Root Objects definition ********************/ Styles:
	//	key="styles" ":" value=StyleObjects;
	public StylesElements getStylesAccess() {
		return pStyles;
	}
	
	public ParserRule getStylesRule() {
		return getStylesAccess().getRule();
	}
	
	//Content:
	//	key="content" ":" value=ContentObjects;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
