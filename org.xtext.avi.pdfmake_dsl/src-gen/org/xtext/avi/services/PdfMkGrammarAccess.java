/*
 * generated by Xtext 2.16.0
 */
package org.xtext.avi.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PdfMkGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.DocDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentContentParserRuleCall_4_0 = (RuleCall)cContentAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStylesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStylesStylesParserRuleCall_5_1_0 = (RuleCall)cStylesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO [?] import: see INT in Terminals.xtext
		//// TODO [L] autovervollstaendigung beim style
		///******************** ********************/ /************ Root Model ****************/ DocDefinition:
		//	"var" "dd" "=" "{" content=Content ("," styles=Styles)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"var" "dd" "=" "{" content=Content ("," styles=Styles)? "}"
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//"dd"
		public Keyword getDdKeyword_1() { return cDdKeyword_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//content=Content
		public Assignment getContentAssignment_4() { return cContentAssignment_4; }
		
		//Content
		public RuleCall getContentContentParserRuleCall_4_0() { return cContentContentParserRuleCall_4_0; }
		
		//("," styles=Styles)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//styles=Styles
		public Assignment getStylesAssignment_5_1() { return cStylesAssignment_5_1; }
		
		//Styles
		public RuleCall getStylesStylesParserRuleCall_5_1_0() { return cStylesStylesParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StringObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StringObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		///******************** Types definition ********************/ StringObject:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TextAlignmentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextAlignmentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCenterKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TextAlignmentType:
		//	"center" | "left" | "right";
		@Override public ParserRule getRule() { return rule; }
		
		//"center" | "left" | "right"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"center"
		public Keyword getCenterKeyword_0() { return cCenterKeyword_0; }
		
		//"left"
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }
		
		//"right"
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
	}
	public class TypeFaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TypeFaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyBoldKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBooleanTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TypeFaceDefinition:
		//	key="bold" ":" value=BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//key="bold" ":" value=BooleanType
		public Group getGroup() { return cGroup; }
		
		//key="bold"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"bold"
		public Keyword getKeyBoldKeyword_0_0() { return cKeyBoldKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=BooleanType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BooleanType
		public RuleCall getValueBooleanTypeParserRuleCall_2_0() { return cValueBooleanTypeParserRuleCall_2_0; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.BooleanType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanType:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }
		
		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ColumnTextWidthTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnTextWidthType");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO [?] add "auto" and "*"
		//ColumnTextWidthType:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class TextStyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextStyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyStyleKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// TODO [L] checken ob sich der style name im root element 'styles' befindet	
		//TextStyleDefinition:
		//	key="style" ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key="style" ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key="style"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"style"
		public Keyword getKeyStyleKeyword_0_0() { return cKeyStyleKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TextDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TextDefinition:
		//	"text:" STRING | "[" STRING "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"text:" STRING | "[" STRING "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"text:" STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//"text:"
		public Keyword getTextKeyword_0_0() { return cTextKeyword_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }
		
		//"[" STRING "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class TextAlignmentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextAlignmentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlignmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// TODO [L] add validattion rule (Enums String are not supported)
		//TextAlignmentDefinition:
		//	"alignment" ":" STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"alignment" ":" STRING
		public Group getGroup() { return cGroup; }
		
		//"alignment"
		public Keyword getAlignmentKeyword_0() { return cAlignmentKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	public class ItalicsDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ItalicsDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyItalicsKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBooleanTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ItalicsDefinition:
		//	key="italics" ":" value=BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//key="italics" ":" value=BooleanType
		public Group getGroup() { return cGroup; }
		
		//key="italics"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"italics"
		public Keyword getKeyItalicsKeyword_0_0() { return cKeyItalicsKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=BooleanType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BooleanType
		public RuleCall getValueBooleanTypeParserRuleCall_2_0() { return cValueBooleanTypeParserRuleCall_2_0; }
	}
	public class FontSizeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.FontSizeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyFontSizeKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FontSizeDefinition:
		//	key="fontSize" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="fontSize" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="fontSize"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"fontSize"
		public Keyword getKeyFontSizeKeyword_0_0() { return cKeyFontSizeKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class StyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStyleObjectParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StyleDefinition:
		//	key=STRING ":" value=StyleObject;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING ":" value=StyleObject
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=StyleObject
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StyleObject
		public RuleCall getValueStyleObjectParserRuleCall_2_0() { return cValueStyleObjectParserRuleCall_2_0; }
	}
	public class WidthDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.WidthDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyWidthKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueColumnTextWidthTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//WidthDefinition:
		//	key="width" ":" value=ColumnTextWidthType;
		@Override public ParserRule getRule() { return rule; }
		
		//key="width" ":" value=ColumnTextWidthType
		public Group getGroup() { return cGroup; }
		
		//key="width"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"width"
		public Keyword getKeyWidthKeyword_0_0() { return cKeyWidthKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ColumnTextWidthType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ColumnTextWidthType
		public RuleCall getValueColumnTextWidthTypeParserRuleCall_2_0() { return cValueColumnTextWidthTypeParserRuleCall_2_0; }
	}
	public class ColumnGapDefintionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnGapDefintion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyColumnGapKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ColumnGapDefintion:
		//	key="columnGap" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//key="columnGap" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//key="columnGap"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"columnGap"
		public Keyword getKeyColumnGapKeyword_0_0() { return cKeyColumnGapKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ColumnDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGlobalStyleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGlobalStyleTextStyleDefinitionParserRuleCall_1_0_0 = (RuleCall)cGlobalStyleAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cKeyColumnsKeyword_2_0 = (Keyword)cKeyAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cValueColumnObjectParserRuleCall_4_0_0 = (RuleCall)cValueAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cValueAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cValueColumnObjectParserRuleCall_4_1_1_0 = (RuleCall)cValueAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////ColumnDefinition:
		////	value=ColumnObject;
		//ColumnDefinition:
		//	"{" (globalStyle?=TextStyleDefinition ",")?
		//	key="columns" ":" (value+=ColumnObject? ("," value+=ColumnObject)*)
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (globalStyle?=TextStyleDefinition ",")? key="columns" ":" (value+=ColumnObject? ("," value+=ColumnObject)*) "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(globalStyle?=TextStyleDefinition ",")?
		public Group getGroup_1() { return cGroup_1; }
		
		//globalStyle?=TextStyleDefinition
		public Assignment getGlobalStyleAssignment_1_0() { return cGlobalStyleAssignment_1_0; }
		
		//TextStyleDefinition
		public RuleCall getGlobalStyleTextStyleDefinitionParserRuleCall_1_0_0() { return cGlobalStyleTextStyleDefinitionParserRuleCall_1_0_0; }
		
		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//key="columns"
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//"columns"
		public Keyword getKeyColumnsKeyword_2_0() { return cKeyColumnsKeyword_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//value+=ColumnObject? ("," value+=ColumnObject)*
		public Group getGroup_4() { return cGroup_4; }
		
		//value+=ColumnObject?
		public Assignment getValueAssignment_4_0() { return cValueAssignment_4_0; }
		
		//ColumnObject
		public RuleCall getValueColumnObjectParserRuleCall_4_0_0() { return cValueColumnObjectParserRuleCall_4_0_0; }
		
		//("," value+=ColumnObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//value+=ColumnObject
		public Assignment getValueAssignment_4_1_1() { return cValueAssignment_4_1_1; }
		
		//ColumnObject
		public RuleCall getValueColumnObjectParserRuleCall_4_1_1_0() { return cValueColumnObjectParserRuleCall_4_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InnerColumnObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.InnerColumnObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftSquareBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTextStringObjectParserRuleCall_1_0_0 = (RuleCall)cTextAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTextStringObjectParserRuleCall_1_1_1_0 = (RuleCall)cTextAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTextObjectAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_0_0 = (RuleCall)cTextObjectAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTextObjectAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_1_1_0 = (RuleCall)cTextObjectAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_0_0 = (RuleCall)cColumnAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_1_1_0 = (RuleCall)cColumnAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InnerColumnObject:
		//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*)
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) "]"
		public Group getGroup() { return cGroup; }
		
		//value="["
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"["
		public Keyword getValueLeftSquareBracketKeyword_0_0() { return cValueLeftSquareBracketKeyword_0_0; }
		
		//text+=StringObject? ("," text+=StringObject)*
		public Group getGroup_1() { return cGroup_1; }
		
		//text+=StringObject?
		public Assignment getTextAssignment_1_0() { return cTextAssignment_1_0; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_0_0() { return cTextStringObjectParserRuleCall_1_0_0; }
		
		//("," text+=StringObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//text+=StringObject
		public Assignment getTextAssignment_1_1_1() { return cTextAssignment_1_1_1; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_1_1_0() { return cTextStringObjectParserRuleCall_1_1_1_0; }
		
		//textObject+=TextObject? ("," textObject+=TextObject)*
		public Group getGroup_2() { return cGroup_2; }
		
		//textObject+=TextObject?
		public Assignment getTextObjectAssignment_2_0() { return cTextObjectAssignment_2_0; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_0_0() { return cTextObjectTextObjectParserRuleCall_2_0_0; }
		
		//("," textObject+=TextObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//textObject+=TextObject
		public Assignment getTextObjectAssignment_2_1_1() { return cTextObjectAssignment_2_1_1; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_1_1_0() { return cTextObjectTextObjectParserRuleCall_2_1_1_0; }
		
		//column+=ColumnDefinition? ("," column+=ColumnDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//column+=ColumnDefinition?
		public Assignment getColumnAssignment_3_0() { return cColumnAssignment_3_0; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_0_0() { return cColumnColumnDefinitionParserRuleCall_3_0_0; }
		
		//("," column+=ColumnDefinition)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//column+=ColumnDefinition
		public Assignment getColumnAssignment_3_1_1() { return cColumnAssignment_3_1_1; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_1_1_0() { return cColumnColumnDefinitionParserRuleCall_3_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ColumnObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftSquareBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTextStringObjectParserRuleCall_1_0_0 = (RuleCall)cTextAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTextStringObjectParserRuleCall_1_1_1_0 = (RuleCall)cTextAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTextObjectAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_0_0 = (RuleCall)cTextObjectAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTextObjectAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTextObjectTextObjectParserRuleCall_2_1_1_0 = (RuleCall)cTextObjectAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_0_0 = (RuleCall)cColumnAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnColumnDefinitionParserRuleCall_3_1_1_0 = (RuleCall)cColumnAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInnerColumnAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInnerColumnInnerColumnObjectParserRuleCall_4_0_0 = (RuleCall)cInnerColumnAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInnerColumnAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInnerColumnInnerColumnObjectParserRuleCall_4_1_1_0 = (RuleCall)cInnerColumnAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ColumnObject:
		//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) (innerColumn+=InnerColumnObject? (","
		//	innerColumn+=InnerColumnObject)*)
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
		//(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) (innerColumn+=InnerColumnObject? (","
		//innerColumn+=InnerColumnObject)*) "]"
		public Group getGroup() { return cGroup; }
		
		//value="["
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"["
		public Keyword getValueLeftSquareBracketKeyword_0_0() { return cValueLeftSquareBracketKeyword_0_0; }
		
		//text+=StringObject? ("," text+=StringObject)*
		public Group getGroup_1() { return cGroup_1; }
		
		//text+=StringObject?
		public Assignment getTextAssignment_1_0() { return cTextAssignment_1_0; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_0_0() { return cTextStringObjectParserRuleCall_1_0_0; }
		
		//("," text+=StringObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//text+=StringObject
		public Assignment getTextAssignment_1_1_1() { return cTextAssignment_1_1_1; }
		
		//StringObject
		public RuleCall getTextStringObjectParserRuleCall_1_1_1_0() { return cTextStringObjectParserRuleCall_1_1_1_0; }
		
		//// TODO [N] find and fix the error
		//textObject+=TextObject? ("," textObject+=TextObject)*
		public Group getGroup_2() { return cGroup_2; }
		
		//textObject+=TextObject?
		public Assignment getTextObjectAssignment_2_0() { return cTextObjectAssignment_2_0; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_0_0() { return cTextObjectTextObjectParserRuleCall_2_0_0; }
		
		//("," textObject+=TextObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//textObject+=TextObject
		public Assignment getTextObjectAssignment_2_1_1() { return cTextObjectAssignment_2_1_1; }
		
		//TextObject
		public RuleCall getTextObjectTextObjectParserRuleCall_2_1_1_0() { return cTextObjectTextObjectParserRuleCall_2_1_1_0; }
		
		//column+=ColumnDefinition? ("," column+=ColumnDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//column+=ColumnDefinition?
		public Assignment getColumnAssignment_3_0() { return cColumnAssignment_3_0; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_0_0() { return cColumnColumnDefinitionParserRuleCall_3_0_0; }
		
		//("," column+=ColumnDefinition)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//column+=ColumnDefinition
		public Assignment getColumnAssignment_3_1_1() { return cColumnAssignment_3_1_1; }
		
		//ColumnDefinition
		public RuleCall getColumnColumnDefinitionParserRuleCall_3_1_1_0() { return cColumnColumnDefinitionParserRuleCall_3_1_1_0; }
		
		//innerColumn+=InnerColumnObject? ("," innerColumn+=InnerColumnObject)*
		public Group getGroup_4() { return cGroup_4; }
		
		//innerColumn+=InnerColumnObject?
		public Assignment getInnerColumnAssignment_4_0() { return cInnerColumnAssignment_4_0; }
		
		//InnerColumnObject
		public RuleCall getInnerColumnInnerColumnObjectParserRuleCall_4_0_0() { return cInnerColumnInnerColumnObjectParserRuleCall_4_0_0; }
		
		//("," innerColumn+=InnerColumnObject)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//innerColumn+=InnerColumnObject
		public Assignment getInnerColumnAssignment_4_1_1() { return cInnerColumnAssignment_4_1_1; }
		
		//InnerColumnObject
		public RuleCall getInnerColumnInnerColumnObjectParserRuleCall_4_1_1_0() { return cInnerColumnInnerColumnObjectParserRuleCall_4_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class TextObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.TextObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueLeftCurlyBracketKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextTextDefinitionParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStyleTextStyleDefinitionParserRuleCall_2_1_0 = (RuleCall)cStyleAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFontSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFontSizeFontSizeDefinitionParserRuleCall_3_1_0 = (RuleCall)cFontSizeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAlignmentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAlignmentTextAlignmentDefinitionParserRuleCall_4_1_0 = (RuleCall)cAlignmentAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeFaceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeFaceTypeFaceDefinitionParserRuleCall_5_1_0 = (RuleCall)cTypeFaceAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cItalicsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cItalicsItalicsDefinitionParserRuleCall_6_1_0 = (RuleCall)cItalicsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cWidthAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cWidthWidthDefinitionParserRuleCall_7_1_0 = (RuleCall)cWidthAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///******************** Objects definition ********************/ // TODO [M] write grammar to support text in []. see playground-style3
		//TextObject:
		//	value="{" text?=TextDefinition ("," style?=TextStyleDefinition)? ("," fontSize?=FontSizeDefinition)? (","
		//	alignment?=TextAlignmentDefinition)? ("," typeFace?=TypeFaceDefinition)? ("," italics?=ItalicsDefinition)? (","
		//	width?=WidthDefinition)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//value="{" text?=TextDefinition ("," style?=TextStyleDefinition)? ("," fontSize?=FontSizeDefinition)? (","
		//alignment?=TextAlignmentDefinition)? ("," typeFace?=TypeFaceDefinition)? ("," italics?=ItalicsDefinition)? (","
		//width?=WidthDefinition)? "}"
		public Group getGroup() { return cGroup; }
		
		//value="{"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"{"
		public Keyword getValueLeftCurlyBracketKeyword_0_0() { return cValueLeftCurlyBracketKeyword_0_0; }
		
		//text?=TextDefinition
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//TextDefinition
		public RuleCall getTextTextDefinitionParserRuleCall_1_0() { return cTextTextDefinitionParserRuleCall_1_0; }
		
		//("," style?=TextStyleDefinition)?
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//style?=TextStyleDefinition
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }
		
		//TextStyleDefinition
		public RuleCall getStyleTextStyleDefinitionParserRuleCall_2_1_0() { return cStyleTextStyleDefinitionParserRuleCall_2_1_0; }
		
		//("," fontSize?=FontSizeDefinition)?
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//fontSize?=FontSizeDefinition
		public Assignment getFontSizeAssignment_3_1() { return cFontSizeAssignment_3_1; }
		
		//FontSizeDefinition
		public RuleCall getFontSizeFontSizeDefinitionParserRuleCall_3_1_0() { return cFontSizeFontSizeDefinitionParserRuleCall_3_1_0; }
		
		//("," alignment?=TextAlignmentDefinition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//alignment?=TextAlignmentDefinition
		public Assignment getAlignmentAssignment_4_1() { return cAlignmentAssignment_4_1; }
		
		//TextAlignmentDefinition
		public RuleCall getAlignmentTextAlignmentDefinitionParserRuleCall_4_1_0() { return cAlignmentTextAlignmentDefinitionParserRuleCall_4_1_0; }
		
		//("," typeFace?=TypeFaceDefinition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//typeFace?=TypeFaceDefinition
		public Assignment getTypeFaceAssignment_5_1() { return cTypeFaceAssignment_5_1; }
		
		//TypeFaceDefinition
		public RuleCall getTypeFaceTypeFaceDefinitionParserRuleCall_5_1_0() { return cTypeFaceTypeFaceDefinitionParserRuleCall_5_1_0; }
		
		//("," italics?=ItalicsDefinition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//italics?=ItalicsDefinition
		public Assignment getItalicsAssignment_6_1() { return cItalicsAssignment_6_1; }
		
		//ItalicsDefinition
		public RuleCall getItalicsItalicsDefinitionParserRuleCall_6_1_0() { return cItalicsItalicsDefinitionParserRuleCall_6_1_0; }
		
		//("," width?=WidthDefinition)?
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//width?=WidthDefinition
		public Assignment getWidthAssignment_7_1() { return cWidthAssignment_7_1; }
		
		//WidthDefinition
		public RuleCall getWidthWidthDefinitionParserRuleCall_7_1_0() { return cWidthWidthDefinitionParserRuleCall_7_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ColumnTextObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ColumnTextObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueColumnDefinitionParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ColumnTextObject:
		//	value=ColumnDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ColumnDefinition
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ColumnDefinition
		public RuleCall getValueColumnDefinitionParserRuleCall_0() { return cValueColumnDefinitionParserRuleCall_0; }
	}
	public class StyleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StyleObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cValueLeftCurlyBracketKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cFontSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFontSizeFontSizeDefinitionParserRuleCall_3_0 = (RuleCall)cFontSizeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeFaceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeFaceTypeFaceDefinitionParserRuleCall_4_1_0 = (RuleCall)cTypeFaceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAlignmentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAlignmentTextAlignmentDefinitionParserRuleCall_5_1_0 = (RuleCall)cAlignmentAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cItalicsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cItalicsItalicsDefinitionParserRuleCall_6_1_0 = (RuleCall)cItalicsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StyleObject:
		//	key=ID ":"
		//	value="{"
		//	fontSize?=FontSizeDefinition? ("," typeFace?=TypeFaceDefinition)? ("," alignment?=TextAlignmentDefinition)? (","
		//	italics?=ItalicsDefinition)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID ":" value="{" fontSize?=FontSizeDefinition? ("," typeFace?=TypeFaceDefinition)? (","
		//alignment?=TextAlignmentDefinition)? ("," italics?=ItalicsDefinition)? "}"
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value="{"
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//"{"
		public Keyword getValueLeftCurlyBracketKeyword_2_0() { return cValueLeftCurlyBracketKeyword_2_0; }
		
		//fontSize?=FontSizeDefinition?
		public Assignment getFontSizeAssignment_3() { return cFontSizeAssignment_3; }
		
		//FontSizeDefinition
		public RuleCall getFontSizeFontSizeDefinitionParserRuleCall_3_0() { return cFontSizeFontSizeDefinitionParserRuleCall_3_0; }
		
		//("," typeFace?=TypeFaceDefinition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//typeFace?=TypeFaceDefinition
		public Assignment getTypeFaceAssignment_4_1() { return cTypeFaceAssignment_4_1; }
		
		//TypeFaceDefinition
		public RuleCall getTypeFaceTypeFaceDefinitionParserRuleCall_4_1_0() { return cTypeFaceTypeFaceDefinitionParserRuleCall_4_1_0; }
		
		//("," alignment?=TextAlignmentDefinition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//alignment?=TextAlignmentDefinition
		public Assignment getAlignmentAssignment_5_1() { return cAlignmentAssignment_5_1; }
		
		//TextAlignmentDefinition
		public RuleCall getAlignmentTextAlignmentDefinitionParserRuleCall_5_1_0() { return cAlignmentTextAlignmentDefinitionParserRuleCall_5_1_0; }
		
		//("," italics?=ItalicsDefinition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//italics?=ItalicsDefinition
		public Assignment getItalicsAssignment_6_1() { return cItalicsAssignment_6_1; }
		
		//ItalicsDefinition
		public RuleCall getItalicsItalicsDefinitionParserRuleCall_6_1_0() { return cItalicsItalicsDefinitionParserRuleCall_6_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class StyleObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.StyleObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueStyleObjectParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueStyleObjectParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StyleObjects:
		//	"{" (value+=StyleObject ("," value+=StyleObject)*)
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (value+=StyleObject ("," value+=StyleObject)*) "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//value+=StyleObject ("," value+=StyleObject)*
		public Group getGroup_1() { return cGroup_1; }
		
		//value+=StyleObject
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//StyleObject
		public RuleCall getValueStyleObjectParserRuleCall_1_0_0() { return cValueStyleObjectParserRuleCall_1_0_0; }
		
		//("," value+=StyleObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//value+=StyleObject
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//StyleObject
		public RuleCall getValueStyleObjectParserRuleCall_1_1_1_0() { return cValueStyleObjectParserRuleCall_1_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ContentObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ContentObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueStringObjectParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueTextObjectParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueColumnTextObjectParserRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		
		//ContentObject:
		//	value=(StringObject | TextObject | ColumnTextObject);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(StringObject | TextObject | ColumnTextObject)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(StringObject | TextObject | ColumnTextObject)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//StringObject
		public RuleCall getValueStringObjectParserRuleCall_0_0() { return cValueStringObjectParserRuleCall_0_0; }
		
		//TextObject
		public RuleCall getValueTextObjectParserRuleCall_0_1() { return cValueTextObjectParserRuleCall_0_1; }
		
		//ColumnTextObject
		public RuleCall getValueColumnTextObjectParserRuleCall_0_2() { return cValueColumnTextObjectParserRuleCall_0_2; }
	}
	public class ContentObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.ContentObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueContentObjectParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueContentObjectParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContentObjects:
		//	"[" (value+=ContentObject ("," value+=ContentObject)*)?
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" (value+=ContentObject ("," value+=ContentObject)*)? "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(value+=ContentObject ("," value+=ContentObject)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//value+=ContentObject
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//ContentObject
		public RuleCall getValueContentObjectParserRuleCall_1_0_0() { return cValueContentObjectParserRuleCall_1_0_0; }
		
		//("," value+=ContentObject)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//value+=ContentObject
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//ContentObject
		public RuleCall getValueContentObjectParserRuleCall_1_1_1_0() { return cValueContentObjectParserRuleCall_1_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class StylesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.Styles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyStylesKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStyleObjectsParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///******************** Root Objects definition ********************/ Styles:
		//	key="styles" ":" value=StyleObjects;
		@Override public ParserRule getRule() { return rule; }
		
		//key="styles" ":" value=StyleObjects
		public Group getGroup() { return cGroup; }
		
		//key="styles"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"styles"
		public Keyword getKeyStylesKeyword_0_0() { return cKeyStylesKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=StyleObjects
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StyleObjects
		public RuleCall getValueStyleObjectsParserRuleCall_2_0() { return cValueStyleObjectsParserRuleCall_2_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.avi.PdfMk.Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyContentKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueContentObjectsParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Content:
		//	key="content" ":" value=ContentObjects;
		@Override public ParserRule getRule() { return rule; }
		
		//key="content" ":" value=ContentObjects
		public Group getGroup() { return cGroup; }
		
		//key="content"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//"content"
		public Keyword getKeyContentKeyword_0_0() { return cKeyContentKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ContentObjects
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ContentObjects
		public RuleCall getValueContentObjectsParserRuleCall_2_0() { return cValueContentObjectsParserRuleCall_2_0; }
	}
	
	
	private final DocDefinitionElements pDocDefinition;
	private final StringObjectElements pStringObject;
	private final TextAlignmentTypeElements pTextAlignmentType;
	private final TypeFaceDefinitionElements pTypeFaceDefinition;
	private final BooleanTypeElements pBooleanType;
	private final ColumnTextWidthTypeElements pColumnTextWidthType;
	private final TextStyleDefinitionElements pTextStyleDefinition;
	private final TextDefinitionElements pTextDefinition;
	private final TextAlignmentDefinitionElements pTextAlignmentDefinition;
	private final ItalicsDefinitionElements pItalicsDefinition;
	private final FontSizeDefinitionElements pFontSizeDefinition;
	private final StyleDefinitionElements pStyleDefinition;
	private final WidthDefinitionElements pWidthDefinition;
	private final ColumnGapDefintionElements pColumnGapDefintion;
	private final ColumnDefinitionElements pColumnDefinition;
	private final InnerColumnObjectElements pInnerColumnObject;
	private final ColumnObjectElements pColumnObject;
	private final TextObjectElements pTextObject;
	private final ColumnTextObjectElements pColumnTextObject;
	private final StyleObjectElements pStyleObject;
	private final StyleObjectsElements pStyleObjects;
	private final ContentObjectElements pContentObject;
	private final ContentObjectsElements pContentObjects;
	private final StylesElements pStyles;
	private final ContentElements pContent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PdfMkGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocDefinition = new DocDefinitionElements();
		this.pStringObject = new StringObjectElements();
		this.pTextAlignmentType = new TextAlignmentTypeElements();
		this.pTypeFaceDefinition = new TypeFaceDefinitionElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pColumnTextWidthType = new ColumnTextWidthTypeElements();
		this.pTextStyleDefinition = new TextStyleDefinitionElements();
		this.pTextDefinition = new TextDefinitionElements();
		this.pTextAlignmentDefinition = new TextAlignmentDefinitionElements();
		this.pItalicsDefinition = new ItalicsDefinitionElements();
		this.pFontSizeDefinition = new FontSizeDefinitionElements();
		this.pStyleDefinition = new StyleDefinitionElements();
		this.pWidthDefinition = new WidthDefinitionElements();
		this.pColumnGapDefintion = new ColumnGapDefintionElements();
		this.pColumnDefinition = new ColumnDefinitionElements();
		this.pInnerColumnObject = new InnerColumnObjectElements();
		this.pColumnObject = new ColumnObjectElements();
		this.pTextObject = new TextObjectElements();
		this.pColumnTextObject = new ColumnTextObjectElements();
		this.pStyleObject = new StyleObjectElements();
		this.pStyleObjects = new StyleObjectsElements();
		this.pContentObject = new ContentObjectElements();
		this.pContentObjects = new ContentObjectsElements();
		this.pStyles = new StylesElements();
		this.pContent = new ContentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.avi.PdfMk".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// TODO [?] import: see INT in Terminals.xtext
	//// TODO [L] autovervollstaendigung beim style
	///******************** ********************/ /************ Root Model ****************/ DocDefinition:
	//	"var" "dd" "=" "{" content=Content ("," styles=Styles)? "}";
	public DocDefinitionElements getDocDefinitionAccess() {
		return pDocDefinition;
	}
	
	public ParserRule getDocDefinitionRule() {
		return getDocDefinitionAccess().getRule();
	}
	
	///******************** Types definition ********************/ StringObject:
	//	value=STRING;
	public StringObjectElements getStringObjectAccess() {
		return pStringObject;
	}
	
	public ParserRule getStringObjectRule() {
		return getStringObjectAccess().getRule();
	}
	
	//TextAlignmentType:
	//	"center" | "left" | "right";
	public TextAlignmentTypeElements getTextAlignmentTypeAccess() {
		return pTextAlignmentType;
	}
	
	public ParserRule getTextAlignmentTypeRule() {
		return getTextAlignmentTypeAccess().getRule();
	}
	
	//TypeFaceDefinition:
	//	key="bold" ":" value=BooleanType;
	public TypeFaceDefinitionElements getTypeFaceDefinitionAccess() {
		return pTypeFaceDefinition;
	}
	
	public ParserRule getTypeFaceDefinitionRule() {
		return getTypeFaceDefinitionAccess().getRule();
	}
	
	//BooleanType:
	//	"true" | "false";
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//// TODO [?] add "auto" and "*"
	//ColumnTextWidthType:
	//	INT;
	public ColumnTextWidthTypeElements getColumnTextWidthTypeAccess() {
		return pColumnTextWidthType;
	}
	
	public ParserRule getColumnTextWidthTypeRule() {
		return getColumnTextWidthTypeAccess().getRule();
	}
	
	//// TODO [L] checken ob sich der style name im root element 'styles' befindet	
	//TextStyleDefinition:
	//	key="style" ":" value=STRING;
	public TextStyleDefinitionElements getTextStyleDefinitionAccess() {
		return pTextStyleDefinition;
	}
	
	public ParserRule getTextStyleDefinitionRule() {
		return getTextStyleDefinitionAccess().getRule();
	}
	
	//TextDefinition:
	//	"text:" STRING | "[" STRING "]";
	public TextDefinitionElements getTextDefinitionAccess() {
		return pTextDefinition;
	}
	
	public ParserRule getTextDefinitionRule() {
		return getTextDefinitionAccess().getRule();
	}
	
	//// TODO [L] add validattion rule (Enums String are not supported)
	//TextAlignmentDefinition:
	//	"alignment" ":" STRING;
	public TextAlignmentDefinitionElements getTextAlignmentDefinitionAccess() {
		return pTextAlignmentDefinition;
	}
	
	public ParserRule getTextAlignmentDefinitionRule() {
		return getTextAlignmentDefinitionAccess().getRule();
	}
	
	//ItalicsDefinition:
	//	key="italics" ":" value=BooleanType;
	public ItalicsDefinitionElements getItalicsDefinitionAccess() {
		return pItalicsDefinition;
	}
	
	public ParserRule getItalicsDefinitionRule() {
		return getItalicsDefinitionAccess().getRule();
	}
	
	//FontSizeDefinition:
	//	key="fontSize" ":" value=INT;
	public FontSizeDefinitionElements getFontSizeDefinitionAccess() {
		return pFontSizeDefinition;
	}
	
	public ParserRule getFontSizeDefinitionRule() {
		return getFontSizeDefinitionAccess().getRule();
	}
	
	//StyleDefinition:
	//	key=STRING ":" value=StyleObject;
	public StyleDefinitionElements getStyleDefinitionAccess() {
		return pStyleDefinition;
	}
	
	public ParserRule getStyleDefinitionRule() {
		return getStyleDefinitionAccess().getRule();
	}
	
	//WidthDefinition:
	//	key="width" ":" value=ColumnTextWidthType;
	public WidthDefinitionElements getWidthDefinitionAccess() {
		return pWidthDefinition;
	}
	
	public ParserRule getWidthDefinitionRule() {
		return getWidthDefinitionAccess().getRule();
	}
	
	//ColumnGapDefintion:
	//	key="columnGap" ":" value=INT;
	public ColumnGapDefintionElements getColumnGapDefintionAccess() {
		return pColumnGapDefintion;
	}
	
	public ParserRule getColumnGapDefintionRule() {
		return getColumnGapDefintionAccess().getRule();
	}
	
	////ColumnDefinition:
	////	value=ColumnObject;
	//ColumnDefinition:
	//	"{" (globalStyle?=TextStyleDefinition ",")?
	//	key="columns" ":" (value+=ColumnObject? ("," value+=ColumnObject)*)
	//	"}";
	public ColumnDefinitionElements getColumnDefinitionAccess() {
		return pColumnDefinition;
	}
	
	public ParserRule getColumnDefinitionRule() {
		return getColumnDefinitionAccess().getRule();
	}
	
	//InnerColumnObject:
	//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
	//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*)
	//	"]";
	public InnerColumnObjectElements getInnerColumnObjectAccess() {
		return pInnerColumnObject;
	}
	
	public ParserRule getInnerColumnObjectRule() {
		return getInnerColumnObjectAccess().getRule();
	}
	
	//ColumnObject:
	//	value="[" (text+=StringObject? ("," text+=StringObject)*) (textObject+=TextObject? ("," textObject+=TextObject)*)
	//	(column+=ColumnDefinition? ("," column+=ColumnDefinition)*) (innerColumn+=InnerColumnObject? (","
	//	innerColumn+=InnerColumnObject)*)
	//	"]";
	public ColumnObjectElements getColumnObjectAccess() {
		return pColumnObject;
	}
	
	public ParserRule getColumnObjectRule() {
		return getColumnObjectAccess().getRule();
	}
	
	///******************** Objects definition ********************/ // TODO [M] write grammar to support text in []. see playground-style3
	//TextObject:
	//	value="{" text?=TextDefinition ("," style?=TextStyleDefinition)? ("," fontSize?=FontSizeDefinition)? (","
	//	alignment?=TextAlignmentDefinition)? ("," typeFace?=TypeFaceDefinition)? ("," italics?=ItalicsDefinition)? (","
	//	width?=WidthDefinition)?
	//	"}";
	public TextObjectElements getTextObjectAccess() {
		return pTextObject;
	}
	
	public ParserRule getTextObjectRule() {
		return getTextObjectAccess().getRule();
	}
	
	//ColumnTextObject:
	//	value=ColumnDefinition;
	public ColumnTextObjectElements getColumnTextObjectAccess() {
		return pColumnTextObject;
	}
	
	public ParserRule getColumnTextObjectRule() {
		return getColumnTextObjectAccess().getRule();
	}
	
	//StyleObject:
	//	key=ID ":"
	//	value="{"
	//	fontSize?=FontSizeDefinition? ("," typeFace?=TypeFaceDefinition)? ("," alignment?=TextAlignmentDefinition)? (","
	//	italics?=ItalicsDefinition)?
	//	"}";
	public StyleObjectElements getStyleObjectAccess() {
		return pStyleObject;
	}
	
	public ParserRule getStyleObjectRule() {
		return getStyleObjectAccess().getRule();
	}
	
	//StyleObjects:
	//	"{" (value+=StyleObject ("," value+=StyleObject)*)
	//	"}";
	public StyleObjectsElements getStyleObjectsAccess() {
		return pStyleObjects;
	}
	
	public ParserRule getStyleObjectsRule() {
		return getStyleObjectsAccess().getRule();
	}
	
	//ContentObject:
	//	value=(StringObject | TextObject | ColumnTextObject);
	public ContentObjectElements getContentObjectAccess() {
		return pContentObject;
	}
	
	public ParserRule getContentObjectRule() {
		return getContentObjectAccess().getRule();
	}
	
	//ContentObjects:
	//	"[" (value+=ContentObject ("," value+=ContentObject)*)?
	//	"]";
	public ContentObjectsElements getContentObjectsAccess() {
		return pContentObjects;
	}
	
	public ParserRule getContentObjectsRule() {
		return getContentObjectsAccess().getRule();
	}
	
	///******************** Root Objects definition ********************/ Styles:
	//	key="styles" ":" value=StyleObjects;
	public StylesElements getStylesAccess() {
		return pStyles;
	}
	
	public ParserRule getStylesRule() {
		return getStylesAccess().getRule();
	}
	
	//Content:
	//	key="content" ":" value=ContentObjects;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
