/*
 * generated by Xtext 2.16.0
 */
grammar InternalPdfMk;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.avi.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.avi.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.avi.services.PdfMkGrammarAccess;

}
@parser::members {
	private PdfMkGrammarAccess grammarAccess;

	public void setGrammarAccess(PdfMkGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDocDefinition
entryRuleDocDefinition
:
{ before(grammarAccess.getDocDefinitionRule()); }
	 ruleDocDefinition
{ after(grammarAccess.getDocDefinitionRule()); } 
	 EOF 
;

// Rule DocDefinition
ruleDocDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocDefinitionAccess().getRootsAssignment()); }
		(rule__DocDefinition__RootsAssignment)
		{ after(grammarAccess.getDocDefinitionAccess().getRootsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTextElement
entryRuleTextElement
:
{ before(grammarAccess.getTextElementRule()); }
	 ruleTextElement
{ after(grammarAccess.getTextElementRule()); } 
	 EOF 
;

// Rule TextElement
ruleTextElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextElementAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getTextElementAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJsonElement
entryRuleJsonElement
:
{ before(grammarAccess.getJsonElementRule()); }
	 ruleJsonElement
{ after(grammarAccess.getJsonElementRule()); } 
	 EOF 
;

// Rule JsonElement
ruleJsonElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJsonElementAccess().getAviKeyword()); }
		'avi'
		{ after(grammarAccess.getJsonElementAccess().getAviKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContent
entryRuleContent
:
{ before(grammarAccess.getContentRule()); }
	 ruleContent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule Content
ruleContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContentAccess().getContentKeyword()); }
		'content:[]'
		{ after(grammarAccess.getContentAccess().getContentKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DocDefinition__RootsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocDefinitionAccess().getRootsContentParserRuleCall_0()); }
		ruleContent
		{ after(grammarAccess.getDocDefinitionAccess().getRootsContentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
